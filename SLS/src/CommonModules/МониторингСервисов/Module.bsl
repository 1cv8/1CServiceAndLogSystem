

Процедура Регламент_ВыполнитьПроверкуМониторингаСервисов(ПроверкаМониторинга) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПроверкаМониторинга);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроверкиМониторингаСервисовСоставПроверки.НомерСтроки КАК НомерСтроки,
	|	ПроверкиМониторингаСервисовСоставПроверки.База1С КАК База1С,
	|	ПроверкиМониторингаСервисовСоставПроверки.Команда КАК Команда,
	|	ПроверкиМониторингаСервисовСоставПроверки.ОповещатьОбУспехе КАК ОповещатьОбУспехе,
	|	ПроверкиМониторингаСервисовСоставПроверки.ГруппаОповещенияОбУспехе КАК ГруппаОповещенияОбУспехе,
	|	ПроверкиМониторингаСервисовСоставПроверки.ОповещатьОНеудаче КАК ОповещатьОНеудаче,
	|	ПроверкиМониторингаСервисовСоставПроверки.ГруппаОповещенияОНеудаче КАК ГруппаОповещенияОНеудаче,
	|	ПроверкиМониторингаСервисовСоставПроверки.ПродолжатьПроверку КАК ПродолжатьПроверку,
	|	ПроверкиМониторингаСервисовСоставПроверки.ИнтервалПовторногоОповещенияОбУспехе КАК ИнтервалПовторногоОповещенияОбУспехе,
	|	ПроверкиМониторингаСервисовСоставПроверки.ИнтервалПовторногоОповещенияОНеудаче КАК ИнтервалПовторногоОповещенияОНеудаче,
	|	ПроверкиМониторингаСервисовСоставПроверки.СсылкаВБазе1С КАК СсылкаВБазе1С,
	|	ПроверкиМониторингаСервисовСоставПроверки.ОповещатьОбИсправлении КАК ОповещатьОбИсправлении,
	|	ПроверкиМониторингаСервисовСоставПроверки.ОповещениеTelegram КАК ОповещениеTelegram,
	|	ПроверкиМониторингаСервисовСоставПроверки.ПараметрИмя КАК ПараметрИмя
	|ИЗ
	|	Справочник.ПроверкиМониторингаСервисов.СоставПроверки КАК ПроверкиМониторингаСервисовСоставПроверки
	|ГДЕ
	|	ПроверкиМониторингаСервисовСоставПроверки.Ссылка = &Ссылка
	|	И НЕ ПроверкиМониторингаСервисовСоставПроверки.Отключить
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроверкиМониторингаСервисовСоставПроверки.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеПрошлойПроверки = ДанныеПредыдущегоРезультатаПроверки(ПроверкаМониторинга, Выборка);
		Состояние = Неопределено;
		ПропуститьПроверку = Ложь;
		РезультатПроверки = ВыполнитьШагПроверки(Выборка, ДанныеПрошлойПроверки, Состояние, ПропуститьПроверку);
		Если НЕ ПропуститьПроверку Тогда
			
			Если ТипЗнч(РезультатПроверки) = Тип("Структура") Тогда
				ОбработатьРезультатШагаПроверки(ПроверкаМониторинга, Выборка, РезультатПроверки, Состояние);
			Иначе
				ЭтоПервыйРезультат = Истина;
				УИДПисьма = Неопределено;
				Для каждого Результат1ойПроверки ИЗ РезультатПроверки Цикл
					ОбработатьРезультатШагаПроверки(ПроверкаМониторинга, Выборка, Результат1ойПроверки, Состояние, ЭтоПервыйРезультат, УИДПисьма);
					ЭтоПервыйРезультат = Ложь;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьШагПроверки(ПараметрыПроверки, ДанныеПрошлойПроверки, Состояние, ПропуститьПроверку)
	
	Команда = ПараметрыПроверки.Команда;
	Если НЕ ЗначениеЗаполнено(Команда) Тогда
		ВызватьИсключение "Не заполнена команда проверки";
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверки();
	
	Ошибка = Ложь;
	ТекстОшибки = "";

	ТекстHTML = "";
	ТемаПисьма = "";
	
	Попытка
		
		ЗначенияПараметровБазы = ЗначенияПараметровКомандыДляБазы1С(Команда, ПараметрыПроверки.База1С);
		ДанныеКоманды = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Команда, "ТипКоманды, ИсполняемыйКод");
		
		ВыполнитьКодКоманды(ДанныеКоманды, ПараметрыПроверки, ЗначенияПараметровБазы, ДанныеПрошлойПроверки, Ошибка, ТекстОшибки, Состояние, ПропуститьПроверку, ТекстHTML, ТемаПисьма, РезультатПроверки);
		
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Ошибка = Истина;
	КонецПопытки;
	
	Если ТипЗнч(РезультатПроверки) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ТекстHTML) Тогда
			РезультатПроверки.ТекстHTML = ТекстHTML;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТемаПисьма) Тогда
			РезультатПроверки.ТемаПисьма = ТемаПисьма;
		КонецЕсли;
		
		Если Ошибка ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Ошибка = Истина;
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = "Неизвестная ошибка";
			КонецЕсли;
			РезультатПроверки.ТекстыОшибок.Добавить(ТекстОшибки);
			РезультатПроверки.Ошибка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

//
//Параметры:
//   ДанныеШага - Структура - Параметры команды
//      "ТипКоманды"
//      "ИсполняемыйКод"
//   ПараметрыПроверки - Структура -  Параметры проверки, строка ТЧ проверки
//   ЗначенияПараметровБазы - Структура - Значения параметров базы 1С и Проверки/Команды
//   ДанныеПрошлойПроверки - Структура - Описание прошлой проверки
//      "ДатаПроверки" - Дата - Дата прошлой проверки
//      "Ошибка" - Булево - Признак ошибки
//      "ТекстОшибки" - Строка - Сообщение об ошибке
//      "Состояние" - Хранилище значений(Структура) - ДАнные переданные в переменную "Состояние" в прошлой проверки
//   Ошибка - Булево - Установить признак ошибки (если не вызвается исключение)
//   ТекстОшибки - Строка - Заполнить текст ошибки (если не вызвается исключение)
//   Состояние - Структура - Заполнить данными, которые будут переданы в следующую проверку
//   ПропуститьПроверку - Булево - Установить признак, если не надо записывать результаты проверки.
Процедура ВыполнитьКодКоманды(ДанныеШага, ПараметрыПроверки, ЗначенияПараметровБазы, ДанныеПрошлойПроверки, Ошибка, ТекстОшибки, Состояние, ПропуститьПроверку, ТекстHTML, ТемаПисьма, РезультатПроверки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеШага.ИсполняемыйКод) Тогда
		ВызватьИсключение "Не заполнен исполняемый код";
	КонецЕсли;
	
	База1С = ПараметрыПроверки.База1С;
	СсылкаВБазе = ПараметрыПроверки.СсылкаВБазе1С;
	
	Выполнить ("" + ДанныеШага.ИсполняемыйКод);
	
КонецПроцедуры

Функция ДанныеПредыдущегоРезультатаПроверки(ПроверкаМониторинга, ПараметрыПроверки)
	
	НЗ = РегистрыСведений.СтатусШаговПроверкиМониторингаСервисов.СоздатьНаборЗаписей();
	НЗ.Отбор.Проверка.Установить(ПроверкаМониторинга);
	НЗ.Отбор.НомерСтрокиПроверки.Установить(ПараметрыПроверки.НомерСтроки);
	
	НЗ.Прочитать();
	
	Результат = Новый Структура("ДатаПроверки, Ошибка, Состояние, ТекстОшибки");
	
	Если НЗ.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, НЗ[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьРезультатШагаПроверки(ПроверкаМониторинга, ПараметрыПроверки, РезультатПроверки, Состояние, ЭтоПервыйРезультат = Истина, УИДПисьма = Неопределено)
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	Если ЭтоПервыйРезультат Тогда
	
		НЗ = РегистрыСведений.СтатистикаШаговПроверкиМониторингаСервисов.СоздатьНаборЗаписей();
		НЗ.Отбор.ДатаПроверки.Установить(ДатаПроверки);
		НЗ.Отбор.Проверка.Установить(ПроверкаМониторинга);
		НЗ.Отбор.НомерСтрокиПроверки.Установить(ПараметрыПроверки.НомерСтроки);

		ЗаписьСтатистика = НЗ.Добавить();
		ЗаписьСтатистика.ДатаПроверки = ДатаПроверки;
		ЗаписьСтатистика.Проверка = ПроверкаМониторинга;
		ЗаписьСтатистика.НомерСтрокиПроверки = ПараметрыПроверки.НомерСтроки;
		
		ЗаписьСтатистика.Ошибка = РезультатПроверки.Ошибка;
		
		НЗ.ОбменДанными.Загрузка = Истина;
		НЗ.Записать(Ложь);
		
		
		НЗ = РегистрыСведений.СтатусШаговПроверкиМониторингаСервисов.СоздатьНаборЗаписей();
		НЗ.Отбор.Проверка.Установить(ПроверкаМониторинга);
		НЗ.Отбор.НомерСтрокиПроверки.Установить(ПараметрыПроверки.НомерСтроки);
		
		НЗ.Прочитать();
		
		ЗаписьСтатистика = Неопределено;
		Если НЗ.Количество() > 0 Тогда
			ЗаписьСтатистика = НЗ[0];
		Иначе
			ЗаписьСтатистика = НЗ.Добавить();
			ЗаписьСтатистика.Проверка = ПроверкаМониторинга;
			ЗаписьСтатистика.НомерСтрокиПроверки = ПараметрыПроверки.НомерСтроки;
		КонецЕсли;
		
		ОшибкаБыло = ЗаписьСтатистика.Ошибка;
		ЗаписьСтатистика.Ошибка = РезультатПроверки.Ошибка;
		ЗаписьСтатистика.ТекстОшибки = СтрСоединить(РезультатПроверки.ТекстыОшибок, Символы.ПС);
		ЗаписьСтатистика.Состояние = Новый ХранилищеЗначения(Состояние, Новый СжатиеДанных(5));
		
		ДатаПроверкиБыло = ЗаписьСтатистика.ДатаПроверки;
		ЗаписьСтатистика.ДатаПроверки = ДатаПроверки;
		
		Если ОшибкаБыло <> ЗаписьСтатистика.Ошибка Тогда
			
			ДатаПроверкиБыло = Дата(1,1,1);
			Если ОшибкаБыло И НЕ ПараметрыПроверки.ОповещатьОбУспехе Тогда
				// Отсылаем оповещение об исправлении, ессно в цепочку
			Иначе
				ЗаписьСтатистика.УИДПисьма = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		НЗ.Записать(Истина);
		
		УИДПисьма = ЗаписьСтатистика.УИДПисьма;
		
	Иначе
		УИДПисьма = Неопределено;
	КонецЕсли;
	
	
	РезультатОтправки = ВыполнитьОповещениеОРезультатеПроверки(ПроверкаМониторинга, ПараметрыПроверки, РезультатПроверки, ОшибкаБыло, ДатаПроверкиБыло, РезультатПроверки.Ошибка, ТекущаяДатаСеанса(), УИДПисьма);
	Если ЭтоПервыйРезультат И РезультатОтправки <> Неопределено Тогда
		
		НЗ = РегистрыСведений.СтатусШаговПроверкиМониторингаСервисов.СоздатьНаборЗаписей();
		НЗ.Отбор.Проверка.Установить(ПроверкаМониторинга);
		НЗ.Отбор.НомерСтрокиПроверки.Установить(ПараметрыПроверки.НомерСтроки);
		
		НЗ.Прочитать();
		
		Если НЗ.Количество() > 0 Тогда
			ЗаписьСтатистика = НЗ[0];
		Иначе
			ЗаписьСтатистика = НЗ.Добавить();
			ЗаписьСтатистика.Проверка = ПроверкаМониторинга;
			ЗаписьСтатистика.НомерСтрокиПроверки = ПараметрыПроверки.НомерСтроки;
		КонецЕсли;
		
		//Если НЕ ЗаписьСтатистика.Ошибка
		//	И НЕ ПараметрыПроверки.ОповещатьОбУспехе Тогда
		//	
		//	ЗаписьСтатистика.УИДПисьма = Неопределено;
		//Иначе
			ЗаписьСтатистика.УИДПисьма = УИДПисьма;
		//КонецЕсли;
		
		НЗ.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьОповещениеОРезультатеПроверки(ПроверкаМониторинга, ПараметрыПроверки, РезультатПроверки, Знач ОшибкаБыло, Знач ДатаПроверкиБыло, Знач Ошибка, Знач ДатаПроверки, Знач УИДПисьма) Экспорт
	
	ТекстHTML = РезультатПроверки.ТекстHTML;
	ТемаПисьма = РезультатПроверки.ТемаПисьма;
	
	РезультатОтправки = Неопределено;

	Если ОшибкаБыло <> Ошибка Тогда
		ДатаПроверкиБыло = Дата(1,1,1);
	КонецЕсли;
	
	ПризнакОтправка = Ложь;
	Интервал = 0;
	Если Ошибка Тогда
		ПризнакОтправка = ПараметрыПроверки.ОповещатьОНеудаче;
		ИнтервалПовтора	= ПараметрыПроверки.ИнтервалПовторногоОповещенияОНеудаче;
		ГруппаОповещения= ПараметрыПроверки.ГруппаОповещенияОНеудаче;
	ИначеЕсли ОшибкаБыло И НЕ ПараметрыПроверки.ОповещатьОбУспехе Тогда
		ПризнакОтправка = ПараметрыПроверки.ОповещатьОбИсправлении;
		ИнтервалПовтора	= -1;
		ГруппаОповещения= ПараметрыПроверки.ГруппаОповещенияОНеудаче;
	Иначе
		ПризнакОтправка = ПараметрыПроверки.ОповещатьОбУспехе;
		ИнтервалПовтора	= ПараметрыПроверки.ИнтервалПовторногоОповещенияОбУспехе;
		ГруппаОповещения= ПараметрыПроверки.ГруппаОповещенияОбУспехе;
	КонецЕсли;
	
	Если НЕ ПризнакОтправка Тогда
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаОповещения) Тогда
		
		ТекстСообщения = СтрШаблон("В проверке ""%1"", в строке %2 не заполнена группа оповещения!",
			ПроверкаМониторинга,
			ПараметрыПроверки.НомерСтроки);
		
		ЗаписьЖурналаРегистрации(
			"ВыполнитьОповещениеОРезультатеПроверки",
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ТекстСообщения);
		
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Если ИнтервалПовтора > 0 Тогда
		
		//Если ИнтервалПовтора = 0 Тогда
		//	ИнтервалПовтора = 1800; // 12h
		//КонецЕсли;
		
		ВремениПрошло = (ДатаПроверки - ДатаПроверкиБыло);
		Если ВремениПрошло < ИнтервалПовтора Тогда
			Возврат РезультатОтправки;
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторыОснований = "";
	Тема = "";
	Если ЗначениеЗаполнено(ТемаПисьма) Тогда
		Тема = СокрЛП(ТемаПисьма);
	Иначе
		Тема = ТемаПисьмаСПараметрамиПроверки(ПроверкаМониторинга, ПараметрыПроверки, Ошибка, ПараметрыПроверки.ОповещатьОбУспехе);
	КонецЕсли;
	Тема = Тема + " за " + Формат(ТекущаяДата(), "ДФ=dd.MM.yy");
	Тема = "FW: " + Тема;
	
	Если ЗначениеЗаполнено(УИДПисьма) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УИДПисьма", УИДПисьма);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УС_ОчередьПочта.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	УС_ОчередьПочта.ИдентификаторыОснований КАК ИдентификаторыОснований,
		|	УС_ОчередьПочта.Тема КАК Тема
		|ИЗ
		|	РегистрСведений.УС_ОчередьПочта КАК УС_ОчередьПочта
		|ГДЕ
		|	УС_ОчередьПочта.УникальныйИдентификатор = &УИДПисьма";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
			ИдентификаторыОснований = Выборка.ИдентификаторыОснований;
			
			Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
				ИдентификаторыОснований = СокрЛП(ИдентификаторыОснований);
			ИначеЕсли ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
				ИдентификаторыОснований = СокрЛП(ИдентификаторыОснований + " <" + ИдентификаторСообщения + ">");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ошибка Тогда
		РезультатОтправки = СформироватьПисьмоОНеудаче(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, ОшибкаБыло, ДатаПроверкиБыло, Ошибка, ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML);
	ИначеЕсли ОшибкаБыло И НЕ ПараметрыПроверки.ОповещатьОбУспехе Тогда
		РезультатОтправки = СформироватьПисьмоОбИсправлении(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, ОшибкаБыло, ДатаПроверкиБыло, Ошибка, ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML);
	Иначе
		РезультатОтправки = СформироватьПисьмоОбУспехе(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, ОшибкаБыло, ДатаПроверкиБыло, Ошибка, ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML);
	КонецЕсли;
	
	Если ПараметрыПроверки.ОповещениеTelegram
		И (
			НЕ ЗначениеЗаполнено(ДатаПроверкиБыло) // Без повторов
			ИЛИ НачалоДня(ДатаПроверкиБыло) <> НачалоДня(ДатаПроверки) // Но не целый же день
		)
		Тогда
		
		Если Ошибка Тогда
			СообщитьВTGОНеудаче(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, ОшибкаБыло, ДатаПроверкиБыло, Ошибка, ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML);
		ИначеЕсли ОшибкаБыло И НЕ ПараметрыПроверки.ОповещатьОбУспехе Тогда
			СообщитьВTGОбИсправлении(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, ОшибкаБыло, ДатаПроверкиБыло, Ошибка, ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция СформироватьПисьмоОбУспехе(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, Знач ОшибкаБыло, Знач ДатаПроверкиБыло, Знач Ошибка, Знач ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML)
	
	РезультатОтправки = Неопределено;
	
	ЭтоРассылкаЛинк = Ложь;
	
	СписокПолучателей = Новый СписокЗначений;
	СписокПолучателейКопии = Новый СписокЗначений;

	Если ЗначениеЗаполнено(РезультатПроверки.ГруппаПолучателей) Тогда
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(РезультатПроверки.ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(РезультатПроверки.ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	Иначе
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОповещения,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОповещения,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	КонецЕсли;
	
	мТекстПисьма =
	"<!DOCTYPE html>
	|<html lang=""ru"">
	|<head>
	|<meta charset=""UTF-8"">
	|<style>
	|td{border: 1px solid black;text-align: center;}
	|table{border-collapse: collapse;}
	|</style>
	|</head>
	|<body>
	|";
	
	мТекстПисьма = мТекстПисьма + "
	|<p>Добрый день!</p>
	|<p>Проверка завершилась успешно!</p>";
	
	СтильТД		= "style='background: #217346; text-align: left; border-width: 1px; padding: 1px 2px; border-style: solid; border-color: black;'";
	СтильШрифт	= "style='font-size:9.0pt;font-family:Arial;color:white'";
	СтильТДлево = "style='background: #FFFFFF; text-align:  left; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДправ = "style='background: #FFFFFF; text-align: right; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДШапка = СтильТД + "><b " + СтильШрифт + ">";
	
	ТекстТаблицыHTML = "
	| <table style='border-collapse: collapse; font-family: Arial; font-size: 10pt;'>";
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|	<tr>
	|		<td " + СтильТДШапка + "Команда:" + "</td>
	|		<td " + СтильТДлево + ПараметрыПроверки.Команда + "</td>
	|	</tr>";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.База1С) Тогда
		ТекстТаблицыHTML = ТекстТаблицыHTML + "
		|	<tr>
		|		<td " + СтильТДШапка + "База:" + "</td>
		|		<td " + СтильТДлево + ПараметрыПроверки.База1С + "</td>
		|	</tr>";
	КонецЕсли;
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|	<tr>
	|		<td " + СтильТДШапка + "Проверка:" + "</td>
	|		<td " + СтильТДлево + ПроверкаМониторинга + " (" + ПараметрыПроверки.НомерСтроки + ")" + "</td>
	|	</tr>";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
			ТекстТаблицыHTML = ТекстТаблицыHTML + "
			|	<tr>
			|		<td " + СтильТДШапка + "Ссылка:" + "</td>
			|		<td " + СтильТДлево + ПараметрыПроверки.СсылкаВБазе1С + "</td>
			|	</tr>";
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПроверки.ПараметрИмя) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
			ТекстТаблицыHTML = ТекстТаблицыHTML + "
			|	<tr>
			|		<td " + СтильТДШапка + "Параметр:" + "</td>
			|		<td " + СтильТДлево + ПараметрыПроверки.ПараметрИмя + "</td>
			|	</tr>";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|</table>";
	
	мТекстПисьма = мТекстПисьма + "
	|" + ТекстТаблицыHTML;
	
	мТекстПисьма = мТекстПисьма + "
	|<p>С уважением, <br>1C Robot</p>";
	
	мТекстПисьма = мТекстПисьма + "
	|
	|</body>
	|</html>";
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	
	Сообщение.Отправитель.Адрес = "1crobot@lancetpharm.ru";
	
	Сообщение.Тема = Тема;
	
	Текст = Сообщение.Тексты.Добавить();
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Текст.Текст = мТекстПисьма;
	
	Для Каждого ОписаниеАдреса Из СписокПолучателей Цикл
		Сообщение.Получатели.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;

	Для Каждого ОписаниеАдреса Из СписокПолучателейКопии Цикл
		Сообщение.Копии.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;
	
	УИДПисьма = РегистрыСведений.УС_ОчередьПочта.СоздатьЗаписьИзСообщения(Сообщение,,,,,,,,, ИдентификаторыОснований);
	Если ЗначениеЗаполнено(УИДПисьма) Тогда
		РезультатОтправки = Новый Структура("УИДПисьма", УИДПисьма);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция СформироватьПисьмоОНеудаче(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, Знач ОшибкаБыло, Знач ДатаПроверкиБыло, Знач Ошибка, Знач ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML)
	
	РезультатОтправки = Неопределено;
	
	ЭтоРассылкаЛинк = Ложь;
	
	СписокПолучателей = Новый СписокЗначений;
	СписокПолучателейКопии = Новый СписокЗначений;

	Если ЗначениеЗаполнено(РезультатПроверки.ГруппаПолучателей) Тогда
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(РезультатПроверки.ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(РезультатПроверки.ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	Иначе
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОповещения,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОповещения,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	КонецЕсли;
	
	мТекстПисьма =
	"<!DOCTYPE html>
	|<html lang=""ru"">
	|<head>
	|<meta charset=""UTF-8"">
	|<style>
	|td{border: 1px solid black;text-align: center;}
	|table{border-collapse: collapse;}
	|</style>
	|</head>
	|<body>
	|";
	
	мТекстПисьма = мТекстПисьма + "
	|<p>Недобрый день!</p>
	|<p>Возникла ошибка!</p>";
	
	СтильТД		= "style='background: #365F91; text-align: left; border-width: 1px; padding: 1px 2px; border-style: solid; border-color: black;'";
	СтильШрифт	= "style='font-size:9.0pt;font-family:Arial;color:white'";
	СтильТДлево = "style='background: #FFFFFF; text-align:  left; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДправ = "style='background: #FFFFFF; text-align: right; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДШапка = СтильТД + "><b " + СтильШрифт + ">";
	
	ТекстТаблицыHTML = "
	| <table style='border-collapse: collapse; font-family: Arial; font-size: 10pt;'>";
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|	<tr>
	|		<td " + СтильТДШапка + "Ошибка:" + "</td>
	|		<td " + СтильТДлево + ТекстыОшибокДляHTML(РезультатПроверки.ТекстыОшибок) + "</td>
	|	</tr>";
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|	<tr>
	|		<td " + СтильТДШапка + "Команда:" + "</td>
	|		<td " + СтильТДлево + ПараметрыПроверки.Команда + "</td>
	|	</tr>";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.База1С) Тогда
		ТекстТаблицыHTML = ТекстТаблицыHTML + "
		|	<tr>
		|		<td " + СтильТДШапка + "База:" + "</td>
		|		<td " + СтильТДлево + ПараметрыПроверки.База1С + "</td>
		|	</tr>";
	КонецЕсли;
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|	<tr>
	|		<td " + СтильТДШапка + "Проверка:" + "</td>
	|		<td " + СтильТДлево + ПроверкаМониторинга + " (" + ПараметрыПроверки.НомерСтроки + ")" + "</td>
	|	</tr>";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
			ТекстТаблицыHTML = ТекстТаблицыHTML + "
			|	<tr>
			|		<td " + СтильТДШапка + "Ссылка:" + "</td>
			|		<td " + СтильТДлево + ПараметрыПроверки.СсылкаВБазе1С + "</td>
			|	</tr>";
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПроверки.ПараметрИмя) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
			ТекстТаблицыHTML = ТекстТаблицыHTML + "
			|	<tr>
			|		<td " + СтильТДШапка + "Параметр:" + "</td>
			|		<td " + СтильТДлево + ПараметрыПроверки.ПараметрИмя + "</td>
			|	</tr>";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|</table>";
	
	мТекстПисьма = мТекстПисьма + "
	|" + ТекстТаблицыHTML;
	
	
	Если ЗначениеЗаполнено(ТекстHTML) Тогда
		мТекстПисьма = мТекстПисьма + "
		|<br>
		|" + ТекстHTML + "
		|<br>
		|";
	КонецЕсли;
	
	
	мТекстПисьма = мТекстПисьма + "
	|<p>С уважением, <br>1C Robot</p>";
	
	мТекстПисьма = мТекстПисьма + "
	|
	|</body>
	|</html>";
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	
	Сообщение.Отправитель.Адрес = "1crobot@lancetpharm.ru";
	
	Сообщение.Тема = Тема;
	
	Текст = Сообщение.Тексты.Добавить();
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Текст.Текст = мТекстПисьма;
	
	Для Каждого ОписаниеАдреса Из СписокПолучателей Цикл
		Сообщение.Получатели.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;

	Для Каждого ОписаниеАдреса Из СписокПолучателейКопии Цикл
		Сообщение.Копии.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;
	
	УИДПисьма = РегистрыСведений.УС_ОчередьПочта.СоздатьЗаписьИзСообщения(Сообщение,,,,,,,,, ИдентификаторыОснований);
	Если ЗначениеЗаполнено(УИДПисьма) Тогда
		РезультатОтправки = Новый Структура("УИДПисьма", УИДПисьма);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция СформироватьПисьмоОбИсправлении(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, Знач ОшибкаБыло, Знач ДатаПроверкиБыло, Знач Ошибка, Знач ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML)
	
	РезультатОтправки = Неопределено;
	
	ЭтоРассылкаЛинк = Ложь;
	
	
	СписокПолучателей = Новый СписокЗначений;
	СписокПолучателейКопии = Новый СписокЗначений;

	Если ЗначениеЗаполнено(РезультатПроверки.ГруппаПолучателей) Тогда
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(РезультатПроверки.ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(РезультатПроверки.ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	Иначе
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОповещения,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОповещения,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	КонецЕсли;
	
	мТекстПисьма =
	"<!DOCTYPE html>
	|<html lang=""ru"">
	|<head>
	|<meta charset=""UTF-8"">
	|<style>
	|td{border: 1px solid black;text-align: center;}
	|table{border-collapse: collapse;}
	|</style>
	|</head>
	|<body>
	|";
	
	мТекстПисьма = мТекстПисьма + "
	|<p>Добрый день!</p>
	|<p>Ошибка успешно исправлена!</p>";
	
	СтильТД		= "style='background: #217346; text-align: left; border-width: 1px; padding: 1px 2px; border-style: solid; border-color: black;'";
	СтильШрифт	= "style='font-size:9.0pt;font-family:Arial;color:white'";
	СтильТДлево = "style='background: #FFFFFF; text-align:  left; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДправ = "style='background: #FFFFFF; text-align: right; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДШапка = СтильТД + "><b " + СтильШрифт + ">";
	
	ТекстТаблицыHTML = "
	| <table style='border-collapse: collapse; font-family: Arial; font-size: 10pt;'>";
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|	<tr>
	|		<td " + СтильТДШапка + "Команда:" + "</td>
	|		<td " + СтильТДлево + ПараметрыПроверки.Команда + "</td>
	|	</tr>";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.База1С) Тогда
		ТекстТаблицыHTML = ТекстТаблицыHTML + "
		|	<tr>
		|		<td " + СтильТДШапка + "База:" + "</td>
		|		<td " + СтильТДлево + ПараметрыПроверки.База1С + "</td>
		|	</tr>";
	КонецЕсли;
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|	<tr>
	|		<td " + СтильТДШапка + "Проверка:" + "</td>
	|		<td " + СтильТДлево + ПроверкаМониторинга + " (" + ПараметрыПроверки.НомерСтроки + ")" + "</td>
	|	</tr>";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
			ТекстТаблицыHTML = ТекстТаблицыHTML + "
			|	<tr>
			|		<td " + СтильТДШапка + "Ссылка:" + "</td>
			|		<td " + СтильТДлево + ПараметрыПроверки.СсылкаВБазе1С + "</td>
			|	</tr>";
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПроверки.ПараметрИмя) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
			ТекстТаблицыHTML = ТекстТаблицыHTML + "
			|	<tr>
			|		<td " + СтильТДШапка + "Параметр:" + "</td>
			|		<td " + СтильТДлево + ПараметрыПроверки.ПараметрИмя + "</td>
			|	</tr>";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстТаблицыHTML = ТекстТаблицыHTML + "
	|</table>";
	
	мТекстПисьма = мТекстПисьма + "
	|" + ТекстТаблицыHTML;
	
	мТекстПисьма = мТекстПисьма + "
	|<p>С уважением, <br>1C Robot</p>";
	
	мТекстПисьма = мТекстПисьма + "
	|
	|</body>
	|</html>";
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	
	Сообщение.Отправитель.Адрес = "1crobot@lancetpharm.ru";
	
	Сообщение.Тема = Тема;
	
	Текст = Сообщение.Тексты.Добавить();
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Текст.Текст = мТекстПисьма;
	
	Для Каждого ОписаниеАдреса Из СписокПолучателей Цикл
		Сообщение.Получатели.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;

	Для Каждого ОписаниеАдреса Из СписокПолучателейКопии Цикл
		Сообщение.Копии.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;
	
	УИДПисьма = РегистрыСведений.УС_ОчередьПочта.СоздатьЗаписьИзСообщения(Сообщение,,,,,,,,, ИдентификаторыОснований);
	Если ЗначениеЗаполнено(УИДПисьма) Тогда
		РезультатОтправки = Новый Структура("УИДПисьма", УИДПисьма);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура СообщитьВTGОНеудаче(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, Знач ОшибкаБыло, Знач ДатаПроверкиБыло, Знач Ошибка, Знач ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML)
	
	ГруппаПолучателей = РезультатПроверки.ГруппаПолучателей;
	Если НЕ ЗначениеЗаполнено(РезультатПроверки.ГруппаПолучателей) Тогда
		ГруппаПолучателей = ГруппаОповещения;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаПолучателей) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "[!!!]Проверка: " + ПроверкаМониторинга + " (" + ПараметрыПроверки.НомерСтроки + ")";
	ТекстСообщения = ТекстСообщения + Символы.ПС + "Команда: " + ПараметрыПроверки.Команда;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.База1С) Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "База: " + ПараметрыПроверки.База1С;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Ссылка: " + ПараметрыПроверки.СсылкаВБазе1С;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ПараметрИмя) Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Параметр: " + ПараметрыПроверки.ПараметрИмя;
	КонецЕсли;
	
	
	ТекстыОшибок = СтрСоединить(РезультатПроверки.ТекстыОшибок, ";");
	Если СтрДлина(ТекстыОшибок) > 155 Тогда
		ТекстыОшибок = Лев(ТекстыОшибок, 155);
	КонецЕсли;
	ТекстСообщения = ТекстСообщения + Символы.ПС + "Ошибка: " + ТекстыОшибок;
	
	ИнтеграцияСTelegram.ОтправитьСообщениеГруппе(ГруппаПолучателей, ТекстСообщения);
	
КонецПроцедуры

Процедура СообщитьВTGОбИсправлении(ПроверкаМониторинга, ПараметрыПроверки, ГруппаОповещения, РезультатПроверки, Знач ОшибкаБыло, Знач ДатаПроверкиБыло, Знач Ошибка, Знач ДатаПроверки, ИдентификаторыОснований, Тема, ТекстHTML)
	
	ГруппаПолучателей = РезультатПроверки.ГруппаПолучателей;
	Если НЕ ЗначениеЗаполнено(РезультатПроверки.ГруппаПолучателей) Тогда
		ГруппаПолучателей = ГруппаОповещения;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаПолучателей) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "[Исправлено]" + Символы.ПС;
	ТекстСообщения = ТекстСообщения + "Проверка: " + ПроверкаМониторинга + " (" + ПараметрыПроверки.НомерСтроки + ")";
	ТекстСообщения = ТекстСообщения + Символы.ПС + "Команда: " + ПараметрыПроверки.Команда;

	Если ЗначениеЗаполнено(ПараметрыПроверки.База1С) Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "База: " + ПараметрыПроверки.База1С;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Ссылка: " + ПараметрыПроверки.СсылкаВБазе1С;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ПараметрИмя) Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Параметр: " + ПараметрыПроверки.ПараметрИмя;
	КонецЕсли;
	
	
	ИнтеграцияСTelegram.ОтправитьСообщениеГруппе(ГруппаПолучателей, ТекстСообщения);
	
КонецПроцедуры



Функция РезультатПроверки() Экспорт
	
	Результат = Новый Структура("Ошибка, ТекстыОшибок, ТекстHTML, ТемаПисьма, ГруппаПолучателей", Ложь, Новый Массив, "", "", Неопределено);
	Возврат Результат;
	
КонецФункции

Функция ЗначенияПараметровКомандыДляБазы1С(Команда, База1С) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Команда", Команда);
	Запрос.УстановитьПараметр("База1С", База1С);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.Наименование КАК Параметр,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеХранилище
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеХранилище
	|	КОНЕЦ КАК ЗначениеХранилище,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеСтрока
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеСтрока
	|	КОНЕЦ КАК ЗначениеСтрока,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеЧисло
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеЧисло
	|	КОНЕЦ КАК ЗначениеЧисло,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеБулево
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеБулево
	|	КОНЕЦ КАК ЗначениеБулево,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеДата
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеДата
	|	КОНЕЦ КАК ЗначениеДата,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеУИД
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеУИД
	|	КОНЕЦ КАК ЗначениеУИД,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеСсылка
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеСсылка
	|	КОНЕЦ КАК ЗначениеСсылка,
	|	ВЫБОР
	|		КОГДА НЕ ЗначенияСохраняемыхПараметровБаз1С.Параметр ЕСТЬ NULL
	|			ТОГДА ЗначенияСохраняемыхПараметровБаз1С.ЗначениеСсылкаНаНастройки
	|		ИНАЧЕ КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр.ЗначениеСсылкаНаНастройки
	|	КОНЕЦ КАК ЗначениеСсылкаНаНастройки,
	|	НЕОПРЕДЕЛЕНО КАК ЗначениеСсылкаВБазеМониторинга
	|ИЗ
	|	Справочник.КомандыМониторингаСервисов.ИспользуемыеПараметрыБаз КАК КомандыМониторингаСервисовИспользуемыеПараметрыБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСохраняемыхПараметровБаз1С КАК ЗначенияСохраняемыхПараметровБаз1С
	|		ПО КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Параметр = ЗначенияСохраняемыхПараметровБаз1С.Параметр
	|			И (ЗначенияСохраняемыхПараметровБаз1С.База1С = &База1С)
	|ГДЕ
	|	КомандыМониторингаСервисовИспользуемыеПараметрыБаз.Ссылка = &Команда
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыКомандМониторинга.ИмяПараметра,
	|	ПараметрыКомандМониторинга.ЗначениеХранилище,
	|	ПараметрыКомандМониторинга.ЗначениеСтрока,
	|	ПараметрыКомандМониторинга.ЗначениеЧисло,
	|	ПараметрыКомандМониторинга.ЗначениеБулево,
	|	ПараметрыКомандМониторинга.ЗначениеДата,
	|	ПараметрыКомандМониторинга.ЗначениеУИД,
	|	ПараметрыКомандМониторинга.ЗначениеСсылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ПараметрыКомандМониторинга.ЗначениеСсылкаВБазеМониторинга
	|ИЗ
	|	РегистрСведений.ПараметрыКомандМониторинга КАК ПараметрыКомандМониторинга
	|ГДЕ
	|	ПараметрыКомандМониторинга.КомандаМониторинга = &Команда";
	
	ЗначениеПараметров = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанныхП = Новый Структура("ЗначениеХранилище,ЗначениеСтрока,ЗначениеЧисло,ЗначениеБулево,ЗначениеДата,ЗначениеУИД,ЗначениеСсылка,ЗначениеСсылкаНаНастройки,ЗначениеСсылкаВБазеМониторинга");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхП, Выборка);
		
		ЗначениеПараметров.Вставить(Выборка.Параметр, СтруктураДанныхП);
		
	КонецЦикла;
	
	Возврат ЗначениеПараметров;
	
КонецФункции

Функция ТекстыОшибокДляHTML(ТекстыОшибок)
	
	МассивТекстовОш = Новый Массив;
	
	Для Каждого ТекстОшибок ИЗ ТекстыОшибок Цикл
		
		Для Каждого ТекстОшибки ИЗ СтрРазделить(ТекстОшибок, Символы.ПС, Ложь) Цикл
			
			МассивТекстовОш.Добавить(ТекстОшибки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстHTML = "";
	Если МассивТекстовОш.Количество() > 0 Тогда

		ТекстHTML = СтрСоединить(МассивТекстовОш, "</p>" + Символы.ПС + "<p>");
		ТекстHTML = "<p>" + ТекстHTML + "</p>"
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ТемаПисьмаСПараметрамиПроверки(ПроверкаМониторинга, ПараметрыПроверки, Ошибка, ОповещатьОбУспехе)

	Если ЗначениеЗаполнено(ПараметрыПроверки.Команда) Тогда
		Тема = "Проверка: """ + ПараметрыПроверки.Команда + """";
	Иначе
		Тема = "Проверка: """ + ПроверкаМониторинга + """";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.База1С) Тогда
		Тема = Тема + " база: " + ПараметрыПроверки.База1С;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.СсылкаВБазе1С) Тогда
		Тема = Тема + ", " + СокрЛП(ПараметрыПроверки.СсылкаВБазе1С);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПроверки.ПараметрИмя) Тогда
		Тема = Тема + ", " + ПараметрыПроверки.ПараметрИмя;
	КонецЕсли;
	
	Возврат Тема;
	
КонецФункции

#Область _СостояниеСервисов

Функция СписокРеглЗаданийВБазе(Знач База1С, Знач ИменаЗаданий = Неопределено, Знач Таймаут = 20) Экспорт
	
	ДанныеСписка = Новый Массив;
	
	ИмяСервера = База1С.ИмяСервераПубликации;
	Если НЕ ЗначениеЗаполнено(ИмяСервера) Тогда
		ВызватьИсключение ("Не заполнен адрес публикации базы: " + База1С);
	КонецЕсли;
	
	Порт = База1С.ПортПубликации;
	Если НЕ ЗначениеЗаполнено(Порт) Тогда
		Порт = 80;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
        ИмяСервера,
        Порт,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ИмяПользователяWebДоступ"),
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ПарольWebДоступ"),
		,
		Таймаут
    );

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	АдресРесурса = "";
	Если НЕ ЗначениеЗаполнено(База1С.ПутьКПубликацииНаСервере) Тогда
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ИмяВКластере);
	Иначе
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ПутьКПубликацииНаСервере);
	КонецЕсли;
	
	АдресРесурса = АдресРесурса + "/hs/mss/ScheduledJobs";
	АдресЗапроса = АдресРесурса;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	КодОтвета = HTTPОтвет.КодСостояния;
	КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
	
	РезультатСтрока = "";
	Попытка
		РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		РезультатСтрока = "";
	КонецПопытки;
	
	Если НЕ КодОтвета_Успех Тогда
		
		ТекстСообщения = "Не удалось получить значение список регл. заданий из базы: " + База1С + " по протоколу http";
		Если ЗначениеЗаполнено(РезультатСтрока) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Текст ответа: " + РезультатСтрока;
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатСтрока);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	МассивПолученный = ДанныеJSON.Получить("val");
	
	ОтборПоИмени = (ИменаЗаданий <> Неопределено);
	Если ТипЗнч(ИменаЗаданий) = Тип("Строка") Тогда
		ИмяЗадания = ИменаЗаданий;
		ИменаЗаданий = Новый Массив;
		ИменаЗаданий.Добавить(ИмяЗадания);
	КонецЕсли;
	
	Для Каждого СтрокаПолученных Из МассивПолученный Цикл
		
		Если ОтборПоИмени Тогда
			Если ИменаЗаданий.Найти(СтрокаПолученных["Наименование"]) <> Неопределено
				ИЛИ ИменаЗаданий.Найти(СтрокаПолученных["Метаданные"]["Имя"]) <> Неопределено
				ИЛИ ИменаЗаданий.Найти(СтрокаПолученных["Метаданные"]["Синоним"]) <> Неопределено
				ИЛИ ИменаЗаданий.Найти(СтрокаПолученных["Метаданные"]["ИмяМетода"]) <> Неопределено
				Тогда
				
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ДанныеСписка.Добавить(СтрокаПолученных);
		
	КонецЦикла;
		
	Возврат ДанныеСписка;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#Область OData

Функция ДанныеСсылкиВБазеПоПротоколуOData(База1С, СсылкаВБазе, Таймаут = 20) Экспорт

	ИмяСервера = База1С.ИмяСервераПубликации;
	Если НЕ ЗначениеЗаполнено(ИмяСервера) Тогда
		ВызватьИсключение ("Не заполнен адрес публикации базы: " + База1С);
	КонецЕсли;
	
	Порт = База1С.ПортПубликации;
	Если НЕ ЗначениеЗаполнено(Порт) Тогда
		Порт = 80;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
        ИмяСервера,
        Порт,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ИмяПользователяWebДоступ"),
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ПарольWebДоступ"),
		,
		Таймаут
    );
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	АдресРесурса = "";
	Если НЕ ЗначениеЗаполнено(База1С.ПутьКПубликацииНаСервере) Тогда
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ИмяВКластере);
	Иначе
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ПутьКПубликацииНаСервере);
	КонецЕсли;
	
	АдресРесурса = АдресРесурса + "/odata/standard.odata";
	АдресРесурса = АдресРесурса + "/" + ТипМетаданныхOdataСсылки(СсылкаВБазе) + "_" + СокрЛП(СсылкаВБазе.ИдентификаторМетаданных.Имя);
	
	АдресРесурса = АдресРесурса + "(guid'" + СсылкаВБазе.УИД + "')";
	
	АдресЗапроса = АдресРесурса + "?$format=json";
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	КодОтвета = HTTPОтвет.КодСостояния;
	КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
	
	РезультатСтрока = "";
	Попытка
		РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		РезультатСтрока = "";
	КонецПопытки;
	
	Если НЕ КодОтвета_Успех Тогда
		
		ТекстСообщения = "Не удалось получить значение ссылки: " + СсылкаВБазе + " из базы: " + База1С + " по протоколу odata";
		Если ЗначениеЗаполнено(РезультатСтрока) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Текст ответа: " + РезультатСтрока;
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатСтрока);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Возврат ДанныеJSON;

КонецФункции

Функция ТипМетаданныхСсылки(СсылкаВБазе) Экспорт
	
	Возврат СокрЛП(СтрРазделить(СсылкаВБазе.ИдентификаторМетаданных.ПолноеИмя, ".")[0]);
	
КонецФункции

Функция ТипМетаданныхOdataСсылки(СсылкаВБазе) Экспорт
	
	ТипМетаданных = НРег(ТипМетаданныхСсылки(СсылкаВБазе));
	Возврат ТипМетаданныхOdata(ТипМетаданных);
	
КонецФункции

Функция ТипМетаданныхOdata(Знач ТипМетаданных)
	
	ТипМетаданных = НРег(ТипМетаданных);
	ТипМетаданныхOdata = "";
	
	Если ТипМетаданных = "справочник" Тогда
		ТипМетаданныхOdata = "Catalog";
	ИначеЕсли ТипМетаданных = "документ" Тогда
		ТипМетаданныхOdata = "Document";
	ИначеЕсли ТипМетаданных = "журналдокументов" Тогда
		ТипМетаданныхOdata = "DocumentJournal";
	ИначеЕсли ТипМетаданных = "константа" Тогда
		ТипМетаданныхOdata = "Constant";
	ИначеЕсли ТипМетаданных = "планобмена" Тогда
		ТипМетаданныхOdata = "ExchangePlan";
	ИначеЕсли ТипМетаданных = "плансчетов" Тогда
		ТипМетаданныхOdata = "ChartOfAccounts";
	ИначеЕсли ТипМетаданных = "планвидоврасчета" Тогда
		ТипМетаданныхOdata = "ChartOfCalculationTypes";
	ИначеЕсли ТипМетаданных = "планвидовхарактеристик" Тогда
		ТипМетаданныхOdata = "ChartOfCharacteristicTypes";
	ИначеЕсли ТипМетаданных = "регистрсведений" Тогда
		ТипМетаданныхOdata = "InformationRegister";
	ИначеЕсли ТипМетаданных = "регистрнакопления" Тогда
		ТипМетаданныхOdata = "AccumulationRegister";
	ИначеЕсли ТипМетаданных = "регистррасчета" Тогда
		ТипМетаданныхOdata = "CalculationRegister";
	ИначеЕсли ТипМетаданных = "регистрбухгалтерии" Тогда
		ТипМетаданныхOdata = "AccountingRegister";
	ИначеЕсли ТипМетаданных = "бизнеспроцесс" Тогда
		ТипМетаданныхOdata = "BusinessProcess";
	ИначеЕсли ТипМетаданных = "задача" Тогда
		ТипМетаданныхOdata = "Task";
	КонецЕсли;
	
	Возврат ТипМетаданныхOdata;
	
КонецФункции

Функция ДанныеСпискаВБазеПоПротоколуOData(Знач База1С, Знач ОбъектМетаданных, Знач Таймаут = 20, OrderBy, Select, Filter = "", expand = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(select) Тогда
		ВызватьИсключение "Запрещено получение списка без указания полей";
	КонецЕсли;
	
	ДанныеСписка = Новый Массив;
	
	ИмяСервера = База1С.ИмяСервераПубликации;
	Если НЕ ЗначениеЗаполнено(ИмяСервера) Тогда
		ВызватьИсключение ("Не заполнен адрес публикации базы: " + База1С);
	КонецЕсли;
	
	Порт = База1С.ПортПубликации;
	Если НЕ ЗначениеЗаполнено(Порт) Тогда
		Порт = 80;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
        ИмяСервера,
        Порт,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ИмяПользователяWebДоступ"),
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ПарольWebДоступ"),
		,
		Таймаут
    );
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	АдресРесурса = "";
	Если НЕ ЗначениеЗаполнено(База1С.ПутьКПубликацииНаСервере) Тогда
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ИмяВКластере);
	Иначе
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ПутьКПубликацииНаСервере);
	КонецЕсли;
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		ИмяМетаданных = СокрЛП(СтрРазделить(ОбъектМетаданных, ".")[1]);
		ТипМетаданных = СокрЛП(СтрРазделить(ОбъектМетаданных, ".")[0]);
	Иначе
		ИмяМетаданных = СокрЛП(ОбъектМетаданных.Имя);
		ТипМетаданных = СокрЛП(СтрРазделить(ОбъектМетаданных.ПолноеИмя, ".")[0]);
	КонецЕсли;
	
	АдресРесурса = АдресРесурса + "/odata/standard.odata";
	АдресРесурса = АдресРесурса + "/" + ТипМетаданныхOdata(ТипМетаданных) + "_" + ИмяМетаданных;
	
	ВсегоЭлементов = КоличествоЗаписейВСпискеOData(HTTPСоединение, АдресРесурса, Заголовки, Filter);
	
	Если ВсегоЭлементов <= 0 Тогда
		Возврат ДанныеСписка;
	КонецЕсли;
	
	ПорцияЭлементов = 500;
	ПолученоЭлементов = 0;
	
	Пока (ПолученоЭлементов) < ВсегоЭлементов Цикл
		
		АдресЗапроса = АдресРесурса + "?$format=json";
		
		Если ПолученоЭлементов > 0 Тогда
			АдресЗапроса = АдресЗапроса + "&$skip=" + Формат(ПолученоЭлементов, "ЧГ=");
		КонецЕсли;
		
		Если (ПолученоЭлементов + ПорцияЭлементов) < ВсегоЭлементов Тогда
			АдресЗапроса = АдресЗапроса + "&$top=" + Формат(ПорцияЭлементов, "ЧГ=");
		КонецЕсли;
		
		АдресЗапроса = АдресЗапроса + "&$orderby=" + OrderBy;
		
		Если ЗначениеЗаполнено(expand) Тогда
			АдресЗапроса = АдресЗапроса + "&$expand=" + expand;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(select) Тогда
			АдресЗапроса = АдресЗапроса + "&$select=" + select;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Filter) Тогда
			АдресЗапроса = АдресЗапроса + "&$filter=" + Filter;
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		
		КодОтвета = HTTPОтвет.КодСостояния;
		КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
		
		РезультатСтрока = "";
		Попытка
			РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
		Исключение
			РезультатСтрока = "";
		КонецПопытки;
		
		Если НЕ КодОтвета_Успех Тогда
			
			ТекстСообщения = "Не удалось получить значение список: " + ОбъектМетаданных + " из базы: " + База1С + " по протоколу odata";
			Если ЗначениеЗаполнено(РезультатСтрока) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Текст ответа: " + РезультатСтрока;
			КонецЕсли;
			
			ВызватьИсключение (ТекстСообщения);
			
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатСтрока);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		МассивПолученный = ДанныеJSON.Получить("value");
		
		Для Каждого СтрокаПолученных Из МассивПолученный Цикл
			ДанныеСписка.Добавить(СтрокаПолученных);
		КонецЦикла;
		
		ПолученоЭлементов = ПолученоЭлементов + ПорцияЭлементов;
		
	КонецЦикла;
	
	Возврат ДанныеСписка;
	
КонецФункции

Функция КоличествоЗаписейВСпискеOData(HTTPСоединение, Знач АдресРесурса, Заголовки, Filter = "")
	
	АдресЗапроса = АдресРесурса + "/$count";
	
	Если ЗначениеЗаполнено(Filter) Тогда
		АдресЗапроса = АдресЗапроса + "?$filter=" + Filter;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	КодОтвета = HTTPОтвет.КодСостояния;
	КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
	
	РезультатСтрока = "";
	Попытка
		РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		РезультатСтрока = "";
	КонецПопытки;
	
	Если КодОтвета_Успех Тогда
		Попытка
			ВсегоЭлементов = Число(РезультатСтрока);
		Исключение
			КодОтвета_Успех = Ложь;
		КонецПопытки;
	КонецЕсли;
		
	Если НЕ КодОтвета_Успех Тогда
		ТекстОшибки = "Ошибка получения количества элементов списка из внешней базы";
		Если ЗначениеЗаполнено(РезультатСтрока) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + "Текст ответа: " + РезультатСтрока;
		КонецЕсли;
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
		
	Возврат ВсегоЭлементов;
	
КонецФункции

#КонецОбласти

#КонецОбласти
