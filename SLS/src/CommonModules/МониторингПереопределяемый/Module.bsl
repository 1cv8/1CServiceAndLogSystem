
Функция ПодключениеКСервисуМДЛП(База1С, ЗначенияПараметровБазы, Таймаут = 10) Экспорт
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL				= ЗначенияПараметровБазы.Получить("АдресWebСервиса").ЗначениеСтрока;
	ПараметрыПодключения.URIПространстваИмен	= "http://TisExchange/";
	ПараметрыПодключения.ИмяСервиса				= "L_TisExchange";
	ПараметрыПодключения.ИмяТочкиПодключения	= "L_TisExchangeSoap";
	
	ПараметрыПодключения.ИмяПользователя	= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ИмяПользователяWebДоступ");
	ПараметрыПодключения.Пароль				= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ПарольWebДоступ");
	ПараметрыПодключения.Таймаут			= Таймаут;
	
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Ложь;
	Service = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	Возврат Service;
	
КонецФункции

Процедура ПроверитьПодключениеКБазеМДЛП(База1С, ЗначенияПараметровБазы, Таймаут = 10) Экспорт

	Service	= ПодключениеКСервисуМДЛП(База1С, ЗначенияПараметровБазы, Таймаут);
	Если Service = Неопределено Тогда
		ТекстОшибки = "Сервис МДЛП не доступен";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
	Ответ				 = Service.GetBaseInfo();
	СтруктураРезультат 	 = СериализаторXDTO.ПрочитатьXDTO(Ответ);
	
	Если СтруктураРезультат = Неопределено Тогда
		ВызватьИсключение "Некорректный результат вызова";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРезультат.ВерсияКонфигурации) Тогда
		ВызватьИсключение "Некорректный результат вызова: " + СтруктураРезультат.АвтообменСтатус;
	КонецЕсли;

	//// Времянка.
	//мКИЗ = Новый Массив;
	//мКИЗ.Добавить("07037960642806FF2CYT834MYMV");
	//мКИЗ.Добавить("07037960642806C4144RZ1579GY");
	//мКИЗ.Добавить("07037960642806AM75CDMGGR9X9");
	//мКИЗ.Добавить("040576010006211200290353717");
	//
	//DocumentStruct = СериализаторXDTO.ЗаписатьXDTO(мКИЗ);
	//Ответ = Service.CheckIsSgtinInAggregation(DocumentStruct);
	//мРезультат = СериализаторXDTO.ПрочитатьXDTO(Ответ);
	
КонецПроцедуры

Процедура ПроверитьДлинуОчередиСообщенийВМДЛП(База1С, ЗначенияПараметровБазы, Таймаут = 10, Ошибка, ТекстОшибки) Экспорт
	
	Service	= ПодключениеКСервисуМДЛП(База1С, ЗначенияПараметровБазы, Таймаут);
	Если Service = Неопределено Тогда
		ТекстОшибки = "Сервис МДЛП не доступен";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
	Ответ				 = Service.GetBaseInfo();
	СтруктураРезультат 	 = СериализаторXDTO.ПрочитатьXDTO(Ответ);
	
	Если СтруктураРезультат = Неопределено Тогда
		ВызватьИсключение "Некорректный результат вызова";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРезультат.ВерсияКонфигурации) Тогда
		ВызватьИсключение "Некорректный результат вызова: " + СтруктураРезультат.АвтообменСтатус;
	КонецЕсли;
	
	
	/////////////////////////////////////// "РегистрСведений.ОчередьПолученияКвитанцийМДЛП"
	ОжидающиеОтправки = ЗапросыOdata.КоличествоЗаписейВСписке(
		База1С,
		"РегистрСведений.ОчередьПередачиДанныхМДЛП",
		80
	);
	
	ОжидающиеОтправки = Макс(СтруктураРезультат.ОжидающиеОтправки, ОжидающиеОтправки);
	
	Если ОжидающиеОтправки > 250 Тогда

		Ошибка = Истина;

		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС;
		КонецЕсли;
		ТекстОшибки = ТекстОшибки + "Превышена критическая длина очереди отправки: " + ОжидающиеОтправки;
	КонецЕсли;

	
	/////////////////////////////////////// "РегистрСведений.ОчередьПолученияКвитанцийМДЛП"
	ОжидающиеОтвета = ЗапросыOdata.КоличествоЗаписейВСписке(
		База1С,
		"РегистрСведений.ОчередьПолученияКвитанцийМДЛП",
		80
	);
	
	ОжидающиеОтвета = Макс(СтруктураРезультат.ОжидающиеОтвета, ОжидающиеОтвета);
	
	Если ОжидающиеОтвета > 250 Тогда
		
		Ошибка = Истина;

		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС;
		КонецЕсли;
		ТекстОшибки = ТекстОшибки + "Превышена критическая длина очереди ожидания ответа: " + ОжидающиеОтвета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуПоследнегоДокументаПриходаВМДЛП(База1С, ЗначенияПараметровБазы, Таймаут = 10, Ошибка, ТекстОшибки) Экспорт
	
	//ДанныеСпискаЗаданий = ЗапросыOdata.ДанныеСпискаВБазе(
	//	База1С,
	//	"Константа.ГраницаЗагрузкиВходящихДокументовМДЛП",
	//	120,
	//	"value");
		
	//МетаданныеГраницы = МетаданныеГраницыЗагрузкиДокументовПоТипуСписка(ТипСписка);
	//
	//Границы = Константы[МетаданныеГраницы.Имя].Получить().Получить();
	//Если Границы <> Неопределено Тогда
	//	Граница = Границы.Получить(ИдентификаторОрганизации);
	//Иначе
	//	Граница = Неопределено;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(Граница) Тогда
	//	Граница = ПолучитьДатуПоследнегоДокументаСписка(ТипСписка, ИдентификаторОрганизации);
	//КонецЕсли;
	
	ДанныеСписка = ЗапросыOdata.ДанныеПервыхИзСпискаВБазе(
		База1С,
		"РегистрСведений.СписокВходящихДокументовМДЛП",
		120,
		1,
		"ДатаДокумента desc",
		"ДатаДокумента"
	);
		
	ДатаДокумента = Неопределено;
	Если ДанныеСписка.Количество() > 0 Тогда
		ДатаДокумента = ДанныеСписка[0]["ДатаДокумента"];
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ВызватьИсключение "Не удалось получить дату последнего прихода!";
	КонецЕсли;
	
	ДатаДокумента = ЗапросыOdata.ПрочитатьДатуOdata(ДатаДокумента);
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ВызватьИсключение "Не удалось получить дату последнего прихода!";
	КонецЕсли;
	
	Если ДатаДокумента > ТекущаяДата() Тогда
		ВызватьИсключение "Некорректная дата последнего прихода: " + ДатаДокумента + " (больше текущей даты)";
	КонецЕсли;
	
	ЧасовПрошло = Окр((ТекущаяДата() - ДатаДокумента)/3600, 2, РежимОкругления.Окр15как10);
	Если ЧасовПрошло > 3 Тогда
		Ошибка = Истина;
		ТекстОшибки = "Внимание! Дата последнего Прихода ТАТ: " + ДатаДокумента + ". Возможно остановился обмен входящими документами.";
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьЗапросSQL(СерверSQL, БазаSQL, ТекстЗапроса)
	
	Connection = РаботаСSQLСервером.СоединениеССерверомSQL(СерверSQL, БазаSQL);
	RecordSet = РаботаСSQLСервером.РезультатЗапросаSQL(Connection, ТекстЗапроса);
	ТЧ_SQL = РаботаСSQLСервером.ВсеЗаписиВыборки(RecordSet);
	РаботаСSQLСервером.ЗакрытьСоединение(Connection);
	
	Возврат ТЧ_SQL;
	
КонецФункции

Процедура ПроверитьОбменHDWGembik(ЗначенияПараметровБазы) Экспорт
	
	БазаSQL = ЗначенияПараметровБазы.Получить("БазаSQL").ЗначениеСсылкаВБазеМониторинга;
	СерверSQL = БазаSQL.Владелец;
	
	ТекстЗапроса =
	"SELECT TOP (1)
	|	[UpdateStartTime],
	|	[UpdateEndTime]
	|FROM [HWC_DATA_LANCET2].[dbo].[UpdateLog]
	|ORDER BY
	|	[UpdateStartTime] desc";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "HWC_DATA_LANCET2", СокрЛП(БазаSQL.Наименование));
	
	ТЧРезультат = ВыполнитьЗапросSQL(СерверSQL, БазаSQL, ТекстЗапроса);
	
	Если ТЧРезультат.Количество() = 0 Тогда
		ВызватьИсключение "Не удалось получить статус синхронизации с HDW";
	КонецЕсли;
	
	ДатаПроверки = РаботаСSQLСервером.ДатаИзSQLСтроки(ТЧРезультат[0].UpdateStartTime);
	Если (ТекущаяДатаСеанса() - ДатаПроверки) > 7200 Тогда
		ВызватьИсключение "Ошибка синхронизации с HDW, последняя синхронизация: " + ТЧРезультат[0].UpdateStartTime;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбменHDWGembik_Lancet_Products(ЗначенияПараметровБазы) Экспорт
	
	БазаSQL = ЗначенияПараметровБазы.Получить("БазаSQL").ЗначениеСсылкаВБазеМониторинга;
	СерверSQL = БазаSQL.Владелец;
	
	ТекстЗапроса =
	"SELECT TOP (1)
	|	[UpdateStartTime],
	|	[UpdateEndTime]
	|FROM [HWC_DATA_LANCET2].[dbo].[UpdateLog_Lancet_Products]
	|ORDER BY
	|	[UpdateStartTime] desc";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "HWC_DATA_LANCET2", СокрЛП(БазаSQL.Наименование));
	
	ТЧРезультат = ВыполнитьЗапросSQL(СерверSQL, БазаSQL, ТекстЗапроса);
	
	Если ТЧРезультат.Количество() = 0 Тогда
		ВызватьИсключение "Не удалось получить статус синхронизации с HDW (Lancet_Products)";
	КонецЕсли;
	
	ДатаПроверки = РаботаСSQLСервером.ДатаИзSQLСтроки(ТЧРезультат[0].UpdateStartTime);
	Если (ТекущаяДатаСеанса() - ДатаПроверки) > 7200 Тогда
		ВызватьИсключение "Ошибка синхронизации с HDW (Lancet_Products), последняя синхронизация: " + ТЧРезультат[0].UpdateStartTime;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыполнениеОбмена(База1С, СсылкаВБазе, ДанныеПрошлойПроверки, Состояние, ПропуститьПроверку) Экспорт
	
	//ДанныеУзла = МониторингСервисов.ДанныеСсылкиВБазеПоПротоколуOData(База1С, СсылкаВБазе);
	ДанныеУзла = ЗапросыOdata.ДанныеСсылкиВБазе(База1С, СсылкаВБазе);
	
	SentNo = ДанныеУзла.Получить("SentNo");
	ReceivedNo = ДанныеУзла.Получить("ReceivedNo");
	
	Если НЕ ЗначениеЗаполнено(ReceivedNo)
		И НЕ ЗначениеЗаполнено(SentNo) Тогда
		
		ВызватьИсключение ("Не удалось получить данные по узлу обмена: " + СсылкаВБазе);
		
	КонецЕсли;
	
	Состояние = Новый Структура("SentNo, ReceivedNo", SentNo, ReceivedNo);
	Если НЕ ЗначениеЗаполнено(ДанныеПрошлойПроверки.ДатаПроверки) Тогда
		// Первая проверка! Не с чем сравнивать!
		Возврат;
	КонецЕсли;
	
	Если 
		//НЕ ДанныеПрошлойПроверки.Ошибка И
		(ТекущаяДатаСеанса() - ДанныеПрошлойПроверки.ДатаПроверки) <= 1800 Тогда
		// Прошло мало времени, еще нечего сравнивать

		ПропуститьПроверку = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиБыло = ДанныеПрошлойПроверки.Состояние.Получить();

	ДатаПоследнейУдачной = Неопределено;
	ДатаУдачногоПолучения = Неопределено;
	ДатаУдачнойОтправки = Неопределено;
	Если ТипЗнч(ДанныеПроверкиБыло) = Тип("Структура") Тогда
		
		ДанныеПроверкиБыло.Свойство("ДатаПоследнейУдачной", ДатаПоследнейУдачной);
		Если НЕ ЗначениеЗаполнено(ДатаПоследнейУдачной) Тогда
			ДатаПоследнейУдачной = ДанныеПрошлойПроверки.ДатаПроверки;
		КонецЕсли;
		
		ДанныеПроверкиБыло.Свойство("ДатаУдачногоПолучения", ДатаУдачногоПолучения);
		ДанныеПроверкиБыло.Свойство("ДатаУдачнойОтправки", ДатаУдачнойОтправки);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаПоследнейУдачной) Тогда
		Состояние.Вставить("ДатаПоследнейУдачной", ТекущаяДата());
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаУдачногоПолучения) Тогда
		ДатаУдачногоПолучения = ДатаПоследнейУдачной;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаУдачнойОтправки) Тогда
		ДатаУдачнойОтправки = ДатаПоследнейУдачной;
	КонецЕсли;
	
	Состояние.Вставить("ДатаПоследнейУдачной", ДатаПоследнейУдачной);
	Состояние.Вставить("ДатаУдачногоПолучения", ДатаУдачногоПолучения);
	Состояние.Вставить("ДатаУдачнойОтправки", ДатаУдачнойОтправки);
	
	Если ReceivedNo = ДанныеПроверкиБыло.ReceivedNo
		И SentNo = ДанныеПроверкиБыло.SentNo Тогда
		
		//ТекстСообщения = "По обмену """ + СсылкаВБазе + """ в базе """ + База1С + """ с " + Формат(ДатаПоследнейУдачной, "ДФ='dd.MM.yyyy hh:mm:ss'") + " не было обмена!";
		ТекстСообщения = "Не было ни отправки, ни получения с " + Формат(ДатаПоследнейУдачной, "ДФ='dd.MM.yyyy HH:mm:ss'") + "!";
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Номер полученного: " + ReceivedNo + " Номер отправленного: " + SentNo;
		ВызватьИсключение (ТекстСообщения);
		
	КонецЕсли;
	
	Если ReceivedNo = ДанныеПроверкиБыло.ReceivedNo Тогда
		
		//ТекстСообщения = "По обмену """ + СсылкаВБазе + """ в базе """ + База1С + """ с " + Формат(ДатаПоследнейУдачной, "ДФ='dd.MM.yyyy hh:mm:ss'") + " не было получения данных!";
		//ТекстСообщения = ТекстСообщения + Символы.ПС + "Номер полученного: " + ReceivedNo + " Номер отправленного: " + SentNo;
		
		ТекстСообщения = "Не было получения данных с " + Формат(ДатаУдачногоПолучения, "ДФ='dd.MM.yyyy HH:mm:ss'") + "!";
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Номер полученного: " + ReceivedNo;
		ВызватьИсключение (ТекстСообщения);
		
	Иначе
		Состояние.Вставить("ДатаУдачногоПолучения", ТекущаяДата());
	КонецЕсли;

	Если SentNo = ДанныеПроверкиБыло.SentNo Тогда
		
		//ТекстСообщения = "По обмену """ + СсылкаВБазе + """ в базе """ + База1С + """ с " + Формат(ДатаПоследнейУдачной, "ДФ='dd.MM.yyyy hh:mm:ss'") + " не было отправки данных!";
		//ТекстСообщения = ТекстСообщения + Символы.ПС + "Номер полученного: " + ReceivedNo + " Номер отправленного: " + SentNo;
		ТекстСообщения = "Не было отправки данных с " + Формат(ДатаУдачнойОтправки, "ДФ='dd.MM.yyyy HH:mm:ss'") + "!";
		ТекстСообщения = ТекстСообщения + Символы.ПС + " Номер отправленного: " + SentNo;
		ВызватьИсключение (ТекстСообщения);
		
	Иначе
		Состояние.Вставить("ДатаУдачнойОтправки", ТекущаяДата());
	КонецЕсли;
	
	Состояние.Вставить("ДатаПоследнейУдачной", ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура ПроверитьНаличиеНеобработанныхСообщенийИнтегрированныхСистем(База1С, СсылкаВБазе, ДанныеПрошлойПроверки, Состояние, ПропуститьПроверку) Экспорт
	
	//Конфигурация = База1С.ПоставляемаяКонфигурация;
	//Если НЕ ЗначениеЗаполнено(Конфигурация) Тогда
	//	ТекстОшибки = "Не заполнен реквизит ""Поставляемая конфигурация"" в базе: " + База1С;
	//	ВызватьИсключение (ТекстОшибки);
	//КонецЕсли;
	
	//ДанныеСписка = МониторингСервисов.ДанныеСпискаВБазеПоПротоколуOData(
	ДанныеСписка = ЗапросыOdata.ДанныеСпискаВБазе(
		База1С,
		"Справочник.СообщенияИнтегрированныхСистем",
		120,
		"Code asc",
		"Code,DeletionMark,ДатаСоздания",
		//"DeletionMark eq false" //  eq 0 // eq 'No' // eq 'Нет' 
	);
	
	
	
	ЧислоНеобработанных = 0;
	НачалоОтсечки = ТекущаяДатаСеанса() - 1800;
	
	Для Каждого Элемент ИЗ ДанныеСписка Цикл
		
		Если Элемент["DeletionMark"] Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаСоздания = ПрочитатьДатуOdata(Элемент["ДатаСоздания"]);
		Если ДатаСоздания > НачалоОтсечки Тогда
			// еще не успели обработаться
			Продолжить;
		КонецЕсли;
		
		ЧислоНеобработанных = ЧислоНеобработанных + 1;
		
	КонецЦикла;
	
	Если ЧислоНеобработанных > 10 Тогда // Сообщение минимум, это еще норма
		ТекстОшибки = "Найдено " + ЧислоНеобработанных + " необработанных сообщений!";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементМетаданныхКонфигурации(Конфигурация, ПолноеИмя)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыОбъектовМетаданныхКонфигураций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданныхКонфигураций КАК ИдентификаторыОбъектовМетаданныхКонфигураций
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданныхКонфигураций.Конфигурация1С = &Конфигурация
	|	И ИдентификаторыОбъектовМетаданныхКонфигураций.ПолноеИмя = &ПолноеИмя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПрочитатьДатуOdata(Знач ДатаСтрокой) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаСтрокой) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Если СтрНайти(ДатаСтрокой, "Z") = 0
		И СтрНайти(ДатаСтрокой, "+") = 0 Тогда
		
		ДатаСтрокой = ДатаСтрокой + "+06:00";
	КонецЕсли;
	
	// 2 раза увеличивает часовой пояс +3
	Возврат ПрочитатьДатуJSON(ДатаСтрокой, ФорматДатыJSON.ISO);
	
КонецФункции

Процедура ПроверитьВыполнениеРеглЗаданияПоИмени(База1С, ИмяЗадания, МаксПрошлоВремени = 600, ДанныеПрошлойПроверки, Состояние, ПропуститьПроверку) Экспорт
	
	ДанныеСпискаЗаданий = МониторингСервисов.СписокРеглЗаданийВБазе(База1С, ИмяЗадания);
	//"Дополнительная обработка: Выгрузка форексис / Команда: Выгрузка форексис"
	
	Если ДанныеСпискаЗаданий.Количество() = 0 Тогда
		ТекстОшибки = "Не найдено регл. задание с именем: """ + ИмяЗадания + """";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
	Если ДанныеСпискаЗаданий.Количество() > 1 Тогда
		ТекстОшибки = "Не найдено Больше 1-го регл. задания с именем: """ + ИмяЗадания + """";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;

	ДанныеЗадания = ДанныеСпискаЗаданий[0];
	
	Если ДанныеЗадания["Использование"] <> Истина Тогда
		ТекстОшибки = "Задание с именем: """ + ИмяЗадания + """ не включено!";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
	Состояние = ДанныеЗадания["ПоследнееЗадание"]["Состояние"];
	ИнформацияОбОшибке = ДанныеЗадания["ПоследнееЗадание"]["ИнформацияОбОшибке"];
	Начало = ДанныеЗадания["ПоследнееЗадание"]["Начало"];
	Конец = ДанныеЗадания["ПоследнееЗадание"]["Конец"];
	
	Выполняется = (Состояние = "Задание выполняется");
	
	Если Выполняется Тогда
		
		ПропуститьПроверку = Истина;
		Возврат;
	КонецЕсли;
	
	Выполнено = (Состояние = "Задание выполнено");
	
	Если НЕ Выполнено Тогда
		
		ТекстОшибки = "Задание с именем: """ + ИмяЗадания + """ не выполнено!";
		ТекстОшибки = ТекстОшибки + Символы.ПС
		+ "Состояние: " + Состояние
		+ ", Начало: " + Начало
		+ ", Конец: " + Конец;
		
		Если ЗначениеЗаполнено(ИнформацияОбОшибке)
			И ИнформацияОбОшибке <> "null" Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС
			+ ", ИнформацияОбОшибке: " + ИнформацияОбОшибке;
		КонецЕсли;
		
		ВызватьИсключение (ТекстОшибки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Начало) Тогда
		Начало = ПрочитатьДатуJSON(Начало, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если ЗначениеЗаполнено(Конец) Тогда
		Конец = ПрочитатьДатуJSON(Конец, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	ПрошлоВремени = ТекущаяДата() - Конец;
	Если ПрошлоВремени > МаксПрошлоВремени Тогда

		ТекстОшибки = "Задание с именем: """ + ИмяЗадания + """ выполнено, но слишком давно!";
		ТекстОшибки = ТекстОшибки + Символы.ПС
		+ "Состояние: " + Состояние
		+ ", Начало: " + Начало
		+ ", Конец: " + Конец;
		
		ВызватьИсключение (ТекстОшибки);

	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьДлинуОчередиESB(База1С) Экспорт
	
	ЧислоНеобработанных = ЗапросыOdata.КоличествоЗаписейВСписке(
		База1С,
		"РегистрСведений.сшпСостояниеСообщений",
		120,
		"СтатусСообщения eq 'Новое' or СтатусСообщения eq 'ВОбработке' or СтатусСообщения eq 'ОжиданиеОбработки' or СтатусСообщения eq 'ОжиданиеОтправки' or СтатусСообщения eq 'Отправлено'" // Романов 17/02/23 + Отправлено
	);
	
	Если ЧислоНеобработанных > 300 Тогда // Сообщение минимум, это еще норма
		ТекстОшибки = "Найдено " + ЧислоНеобработанных + " необработанных сообщений для шины ESB!";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОшибкиОбработкиСообщенийОчередиESB(База1С, ДанныеПрошлойПроверки, ТекстHTML, Ошибка, ТекстОшибки, РезультатПроверки) Экспорт
	
	ДатаПроверкиС = Дата(1,1,1);
	Если ЗначениеЗаполнено(ДанныеПрошлойПроверки.ДатаПроверки) Тогда
		ДатаПроверкиС = ДанныеПрошлойПроверки.ДатаПроверки;
	КонецЕсли;
	
	ДатаПроверкиС = Макс(ДатаПроверкиС, ТекущаяДатаСеанса() - 12*3600);
	ДатаПроверкиС = Мин(ДатаПроверкиС, ТекущаяДатаСеанса() - 300);
	
	Попытка
		
    	ДанныеСпискаЗаданий = ЗапросыOdata.ДанныеСпискаВБазе(
    		База1С,
    		"РегистрСведений.сшпСостояниеСообщений",
    		120,
    		"ДатаИзменения",
    		"ДатаИзменения, ОписаниеОшибки",
    		"ДатаИзменения gt " + ЗапросыOdata.ДатаДляЗапроса(ДатаПроверкиС) + " and СтатусСообщения eq 'ОшибкаОбработки'"
    	);
		
    Исключение
		
        ИнфоОбОшибке = ИнформацияОбОшибке();
    	
        Ошибка = Истина;
        ТекстОшибки = КраткоеПредставлениеОшибки(ИнфоОбОшибке);
		
        Если СтрНайти(ТекстОшибки, "Ошибка работы с Интернет") > 0
             И СтрНайти(ТекстОшибки, "Couldn't resolve host name") > 0 Тогда
			
			// 30/03/23 IMPL-373
			РезультатПроверки.ГруппаПолучателей = Справочники.ГруппыПолучателейРассылок.НайтиПоКоду("000000019");
        ИначеЕсли СтрНайти(ТекстОшибки, "Ошибка работы с Интернет") > 0
             И СтрНайти(ТекстОшибки, "Не могу установить соединение") > 0 Тогда
			
			// 30/03/23 IMPL-373
			РезультатПроверки.ГруппаПолучателей = Справочники.ГруппыПолучателейРассылок.НайтиПоКоду("000000020");
        КонецЕсли;
		
        Возврат;
		
    КонецПопытки;
	
	Если ДанныеСпискаЗаданий.Количество() = 0 Тогда
		Возврат; // Все хорошо
	КонецЕсли;
	
	ТаблицаОшибокГруппа = Новый ТаблицаЗначений;
	ТаблицаОшибокГруппа.Колонки.Добавить("ДатаИзменения", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаОшибокГруппа.Колонки.Добавить("ОписаниеОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ТаблицыОшибок = Новый Массив;
	ТаблицыОшибок.Добавить(ТаблицаОшибокГруппа.СкопироватьКолонки());
	ТаблицыОшибок.Добавить(ТаблицаОшибокГруппа.СкопироватьКолонки());
	ТаблицыОшибок.Добавить(ТаблицаОшибокГруппа.СкопироватьКолонки());
	ТаблицыОшибок.Добавить(ТаблицаОшибокГруппа.СкопироватьКолонки());
	ТаблицыОшибок.Добавить(ТаблицаОшибокГруппа.СкопироватьКолонки());
	
	ГруппыПолучателей = Новый Массив;
	ГруппыПолучателей.Добавить(Неопределено);
	ГруппыПолучателей.Добавить(Справочники.ГруппыПолучателейРассылок.НайтиПоКоду("000000017"));
	ГруппыПолучателей.Добавить(Справочники.ГруппыПолучателейРассылок.НайтиПоКоду("000000018"));
	ГруппыПолучателей.Добавить(Неопределено);
	ГруппыПолучателей.Добавить(Неопределено);
	
	Сч = 0;
	Для Каждого СтрокаСписка ИЗ ДанныеСпискаЗаданий Цикл
		
		Если ОшибкаВСпискеИсключений(СтрокаСписка["ОписаниеОшибки"]) Тогда
			Продолжить;
		КонецЕсли;
		
		Сч = Сч + 1;
		
		ИндексТЧ = 0;
		Если СтрНайти(СтрокаСписка["ОписаниеОшибки"], "При выполнении обработчика ФактОтгрузкиКлиенту_WMSOUT") > 0
			И СтрНайти(СтрокаСписка["ОписаниеОшибки"], "упакованы серийные номера, отсутсвующие в данных резерва") > 0
			Тогда
			ИндексТЧ = 1;
		ИначеЕсли СтрНайти(СтрокаСписка["ОписаниеОшибки"], "При выполнении обработчика ПланируемыйПриходТАТ_ERP_OUT") > 0
			И СтрНайти(СтрокаСписка["ОписаниеОшибки"], "не заполнена Номенклатура") > 0
			Тогда
			ИндексТЧ = 2;
		КонецЕсли;
		
		СтрокаТЧ = ТаблицыОшибок[ИндексТЧ].Добавить();
		
		СтрокаТЧ.ДатаИзменения = СтрокаСписка["ДатаИзменения"];
		СтрокаТЧ.ОписаниеОшибки = СтрокаСписка["ОписаниеОшибки"];
		
	КонецЦикла;
	
	Если Сч = 0 Тогда
		Возврат; // Ошибок нет - все в исключениях
	КонецЕсли;
	
	СтильТД		= "style='background: #365F91; text-align: center; border-width: 1px; padding: 1px 2px; border-style: solid; border-color: black;'";
	СтильШрифт	= "style='font-size:9.0pt;font-family:Arial;color:white'";
	СтильТДлево = "style='background: #FFFFFF; text-align:  left; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДправ = "style='background: #FFFFFF; text-align: right; border: 1px solid #000000; padding: 1px 2px;'>";
	
	РезультатПроверки = Новый Массив;
	
	НомерТЧ = 0;
	Для каждого ТЧОшибок ИЗ ТаблицыОшибок Цикл
		
		НомерТЧ = НомерТЧ + 1;
		
		Если ТЧОшибок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстHTMLОшибок = "
		| <table style='border-collapse: collapse; font-family: Arial; font-size: 10pt;'>
		|    <tr>
		|		<td " + СтильТД + "><b " + СтильШрифт + ">№ п/п</b></td>
		|		<td " + СтильТД + "><b " + СтильШрифт + ">Дата</b></td>
		|		<td " + СтильТД + "><b " + СтильШрифт + ">Описание ошибки</b></td>
		|	</tr>";
		
		Сч = 0;
		Для Каждого СтрокаОшибки ИЗ ТЧОшибок Цикл
			
			Сч = Сч + 1;
			
			ТекстHTMLОшибок = ТекстHTMLОшибок + "
			|	<tr>
			|		<td " + СтильТДлево + Формат(Сч, "ЧГ=") + "</td>
			|		<td " + СтильТДправ + СтрокаОшибки.ДатаИзменения + "</td>
			|		<td " + СтильТДлево + СтрокаОшибки.ОписаниеОшибки + "</td>
			|	</tr>";
			
		КонецЦикла;
		
		ТекстHTMLОшибок = ТекстHTMLОшибок + "
		|</table>";
		
		РезультатОднойПроверки = МониторингСервисов.РезультатПроверки();
		
		РезультатОднойПроверки.Ошибка = Истина;
		РезультатОднойПроверки.ТекстыОшибок.Добавить("Найдено " + Сч + " ошибок обработки сообщений для шины ESB!");
		РезультатОднойПроверки.ГруппаПолучателей = ГруппыПолучателей[(НомерТЧ-1)];
		РезультатОднойПроверки.ТекстHTML = ТекстHTMLОшибок;
		РезультатПроверки.Добавить(РезультатОднойПроверки);
		
	КонецЦикла;
	

	
	//ТекстHTML = "
	//| <table style='border-collapse: collapse; font-family: Arial; font-size: 10pt;'>
	//|    <tr>
	//|		<td " + СтильТД + "><b " + СтильШрифт + ">№ п/п</b></td>
	//|		<td " + СтильТД + "><b " + СтильШрифт + ">Дата</b></td>
	//|		<td " + СтильТД + "><b " + СтильШрифт + ">Описание ошибки</b></td>
	//|	</tr>";
	//
	//
	//Сч = 0;
	//Для Каждого СтрокаСписка ИЗ ДанныеСпискаЗаданий Цикл
	//	
	//	Если ОшибкаВСпискеИсключений(СтрокаСписка["ОписаниеОшибки"]) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Сч = Сч + 1;
	//	
	//	ТекстHTML = ТекстHTML + "
	//	|	<tr>
	//	|		<td " + СтильТДлево + Формат(Сч, "ЧГ=") + "</td>
	//	|		<td " + СтильТДправ + СтрокаСписка["ДатаИзменения"] + "</td>
	//	|		<td " + СтильТДлево + СтрокаСписка["ОписаниеОшибки"] + "</td>
	//	|	</tr>";
	//	
	//КонецЦикла;
	//
	//ТекстHTML = ТекстHTML + "
	//|</table>";
	//
	//Если Сч > 0 Тогда
	//	
	//	Ошибка = Истина;
	//	ТекстОшибки = "Найдено " + ДанныеСпискаЗаданий.Количество() + " ошибок обработки сообщений для шины ESB!";
	//	
	//Иначе
	//	ТекстHTML = "";
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДоступностьСервера(АдресСервера, Ошибка, ТекстОшибки) Экспорт
	
	РезультатПроверки = ПолучениеФайловИзИнтернетаСлужебный.ПроверитьДоступностьСервера(АдресСервера);
	Если НЕ РезультатПроверки.Доступен Тогда
		
		Ошибка		= Истина;
		ТекстОшибки	= РезультатПроверки.ЖурналДиагностики;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОшибкаВСпискеИсключений(ОписаниеОшибки)
	
	Результат = Ложь;
	
	//Если СтрНайти(ОписаниеОшибки, "При выполнении обработчика ПланируемыйПриходТАТ") > 0 Тогда
	//	Поз1 = СтрНайти(ОписаниеОшибки, "Планируемый приход ТАТ");
	//	Если Поз1 > 0
	//		И СтрНайти(ОписаниеОшибки, ": не заполнена Номенклатура",, Поз1) > 0
	//		Тогда
	//		
	//		Результат = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДоступностьHTMLСтраницы(ПараметрыПроверки, Знач Таймаут = 60, Знач КодировкаТекста = "", ТекстHTML, Ошибка, ТекстОшибки) Экспорт
	
	//ОтветHTTP = КоннекторHTTP.Get("http://wh-wms-app01p:8092/control/logs/index.html");
	//ОтветHTTP = КоннекторHTTP.Get("http://wh-wms-app01p:8099/control/info/index.html");
	
	АдресСтраницы = ПараметрыПроверки.ПараметрИмя;
	ОтветHTTP = КоннекторHTTP.Get(АдресСтраницы);
	
	Если ОтветHTTP.Ошибки.Количество() > 0 Тогда
		Ошибка = Истина;
		ТекстОшибки = СтрСоединить(ОтветHTTP.Ошибки, Символы.ПС);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодировкаТекста) Тогда
		
		КодировкаТекста = "utf-8";
		Если ЗначениеЗаполнено(ОтветHTTP["Кодировка"]) Тогда
			КодировкаТекста = СокрЛП(ОтветHTTP["Кодировка"]);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстHTML = ПолучитьСтрокуИзДвоичныхДанных(ОтветHTTP.Тело, КодировкаТекста);
	ТекстСтраницы = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстHTML);
	
КонецПроцедуры

Процедура ПроверитьДлинуОчередиВыгрузкиПЗ(База1С) Экспорт
	
	ЧислоНеобработанных = ЗапросыOdata.КоличествоЗаписейВСписке(
		База1С,
		"РегистрСведений.РегистрацияСинхронизацииУчетаПЗ_УХ",
		120,
		"Ошибка eq true or ПопытокВыгрузки ge 15"
	);
	
	Если ЧислоНеобработанных > 2 Тогда // Сообщение минимум, это еще норма
		ТекстОшибки = "Найдено " + ЧислоНеобработанных + " документов по ""Учету ПЗ"" выгруженных в УХ с ошибками!";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
	ДатаПроверкиС = ТекущаяДата() - 600;
	
	ЧислоНеобработанных = ЗапросыOdata.КоличествоЗаписейВСписке(
		База1С,
		"РегистрСведений.РегистрацияСинхронизацииУчетаПЗ_УХ",
		120,
		"ПериодЗаписи lt " + ЗапросыOdata.ДатаДляЗапроса(ДатаПроверкиС)
	);
	
	Если ЧислоНеобработанных > 50 Тогда // Сообщение минимум, это еще норма
		ТекстОшибки = "Найдено " + ЧислоНеобработанных + " документов по ""Учету ПЗ"" не выгруженных в УХ!";
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуПоследнейСинхронизацииСтатусовМДЛПНаСайте(ЗначенияПараметровБазы) Экспорт
	
	БазаSQL = ЗначенияПараметровБазы.Получить("БазаSQL").ЗначениеСсылкаВБазеМониторинга;
	СерверSQL = БазаSQL.Владелец;
	
	ТекстЗапроса =
	"SELECT
	|	UPDDATE
	|FROM MDLPSaleStatuses
	|ORDER BY
	|	UPDDATE desc
	|LIMIT 1";
	
	ТЧРезультат = ВыполнитьЗапросSQL(СерверSQL, БазаSQL, ТекстЗапроса);
	
	Если ТЧРезультат.Количество() = 0 Тогда
		ВызватьИсключение "Не удалось получить дату синхронизации с сайтом";
	КонецЕсли;
	
	ДатаПроверки = РаботаСSQLСервером.ДатаИзSQLСтроки(ТЧРезультат[0].UPDDATE);
	Если (ТекущаяУниверсальнаяДата() - ДатаПроверки) > 3600 Тогда
		ВызватьИсключение "Ошибка синхронизации с сайтом, последняя синхронизация: " + ТЧРезультат[0].UPDDATE;
	КонецЕсли;
	
КонецПроцедуры