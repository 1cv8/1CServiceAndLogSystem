
#Если Сервер Или ВнешнееСоединение Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

#Область ПреобразованиеВJSON

Функция СериализоватьВJSON(Данные,
	Знач ПараметрыЗаписи = Неопределено, Знач НастройкаСериализации = Неопределено,
	Знач ИмяФункцииПреобразования = "", Знач МодульФункцииПреобразования = Неопределено) Экспорт
	//, ДопПараметры = Неопределено) Экспорт
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = ПараметрыЗаписиJSONПоУмолчанию();
	КонецЕсли;
	
	Если НастройкаСериализации = Неопределено Тогда
		НастройкаСериализации = НастройкаСериализацииJSONПоУмолчанию();
	КонецЕсли;
	
	Если ИмяФункцииПреобразования = "" Тогда
		ИмяФункцииПреобразования = "ФункцияПреобразованияJSONЗначений";
		МодульФункцииПреобразования = ОбщегоНазначения.ОбщийМодуль("_ОбщиеФункцииHTTPСервисов");
	КонецЕсли;
	
	//Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	//КонецЕсли;
	
	ДопПараметры.Вставить("ПараметрыЗаписи",		ПараметрыЗаписи);
	ДопПараметры.Вставить("НастройкаСериализации",	НастройкаСериализации);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);

	ЗаписатьJSON(
		ЗаписьJSON,
		Данные,
		НастройкаСериализации,
		ИмяФункцииПреобразования,
		МодульФункцииПреобразования,
		ДопПараметры);	
		
	JSONТекст = ЗаписьJSON.Закрыть();
	Возврат JSONТекст;
	
КонецФункции

Функция ДесериализоватьЗначениеИзJSON(JSONТекст, ИменаЗначенийТипаДата = Неопределено, Знач НастройкаСериализации = Неопределено) Экспорт
	
	Если НастройкаСериализации = Неопределено Тогда
		НастройкаСериализации = НастройкаСериализацииJSONПоУмолчанию();
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSONТекст);
	
	ТекЗначение = ПрочитатьJSON(
		ЧтениеJSON,
		Ложь,
		ИменаЗначенийТипаДата,
		НастройкаСериализации.ФорматСериализацииДаты);
	
	Возврат ТекЗначение;
	
КонецФункции
	

Функция ФункцияПреобразованияJSONЗначений(ИмяСвойства = "", ИсходноеЗначение, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	
	Если ТипЗнч(ИсходноеЗначение) = Тип("ТаблицаЗначений") Тогда
		
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ИсходноеЗначение);
		
	Иначе
		
		Попытка
			Возврат XMLСтрока(ИсходноеЗначение);
		Исключение
			
			Попытка
				Возврат "" + ИсходноеЗначение;
			Исключение
				Возврат "!Ошибка преобразования!"
			КонецПопытки;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция СериализоватьТаблицуЗначенийВJSON(ТаблицаЗначений, Знач ПараметрыЗаписи = Неопределено, Знач НастройкаСериализации = Неопределено) Экспорт
	
	Возврат СериализоватьВJSON(ТаблицаЗначений, ПараметрыЗаписи, НастройкаСериализации);
	
КонецФункции

Функция СериализоватьСтруктуруВJSON(СтруктураДанных, Знач ПараметрыЗаписи = Неопределено, Знач НастройкаСериализации = Неопределено) Экспорт
	
	Возврат СериализоватьВJSON(СтруктураДанных, ПараметрыЗаписи, НастройкаСериализации);
	
КонецФункции

Функция ЗначениеВJSON(ЗначениеПримитивногоТипа, Знач ПараметрыЗаписи = Неопределено, Знач НастройкаСериализации = Неопределено) Экспорт
	
	JSONТекст = СериализоватьВJSON(ЗначениеПримитивногоТипа, ПараметрыЗаписи, НастройкаСериализации);
	
	ТипИсходногоЗначения = ТипЗнч(ЗначениеПримитивногоТипа);
	Если ТипИсходногоЗначения = Тип("Дата") Тогда
		Если Лев(JSONТекст, 1) = """" И Прав(JSONТекст, 1) = """" Тогда
			JSONТекст = Сред(JSONТекст, 2, СтрДлина(JSONТекст) - 2);
		КонецЕсли;
	//Булево? - без кавычек
	ИначеЕсли ТипИсходногоЗначения = Тип("Булево") Тогда
		Если Лев(JSONТекст, 1) = """" И Прав(JSONТекст, 1) = """" Тогда
			JSONТекст = Сред(JSONТекст, 2, СтрДлина(JSONТекст) - 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат JSONТекст;
	
КонецФункции


Процедура ЗаполнитьТаблицуЗначенийИзJSON(JSONТекст, ТаблицаПриемник, ИменаЗначенийТипаДата = Неопределено, Знач НастройкаСериализации = Неопределено) Экспорт
	
	ТекМассивСтруктур = ДесериализоватьЗначениеИзJSON(JSONТекст, ИменаЗначенийТипаДата, НастройкаСериализации);
	Если ТипЗнч(ТекМассивСтруктур) = Тип("Массив") Тогда
		
		Для Каждого СтруктураСтроки ИЗ ТекМассивСтруктур Цикл
			
			СтрокаТаблицы = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция JSONВЗначение(Знач JSONТекст, Знач НазваниеТипаЗначения = "", Знач НастройкаСериализации = Неопределено) Экспорт
	
	Если НазваниеТипаЗначения <> "" Тогда
		
		НазваниеТипаЗначения = НРег(НазваниеТипаЗначения);
		
		Если СтрНайти(НазваниеТипаЗначения, "дата") > 0
			ИЛИ СтрНайти(НазваниеТипаЗначения, "строка") > 0 Тогда
			
			Если Лев(JSONТекст, 1) = """" И Прав(JSONТекст, 1) = """" Тогда
			Иначе
				JSONТекст = """" + JSONТекст + """";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДесериализоватьЗначениеИзJSON(JSONТекст,, НастройкаСериализации);
	
КонецФункции

#КонецОбласти

#Область Формирование_http_ответов

Функция ОтветССообщениемОбУспехе(СообщениеОбОшибке, КодСостояния = 200) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	Ответ.УстановитьТелоИзСтроки(СообщениеОбОшибке, КодировкаТекста.UTF8);
	Ответ.Заголовки.Вставить("Content-Type","text/html");
	Ответ.Заголовки.Вставить("Content-Language", "ru");
	Ответ.Заголовки.Вставить("Content-Charset", "utf-8");
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветСJSONСообщением(JSONТекст, КодСостояния = 200) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	Ответ.УстановитьТелоИзСтроки(JSONТекст, КодировкаТекста.UTF8);
	Ответ.Заголовки.Вставить("Content-Type","application/json");
	Ответ.Заголовки.Вставить("Content-Language", "ru");
	Ответ.Заголовки.Вставить("Content-Charset", "utf-8");
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветССообщениемОбОшибке(СообщениеОбОшибке, КодСостояния = 405) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	Ответ.УстановитьТелоИзСтроки(СообщениеОбОшибке, КодировкаТекста.UTF8);
	Ответ.Заголовки.Вставить("Content-Type","text/html");
	Ответ.Заголовки.Вставить("Content-Language", "ru");
	Ответ.Заголовки.Вставить("Content-Charset", "utf-8");
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Обработка_http_ответов

Процедура ОбработатьОшибкуИзОтвета(http_ответ, http_запрос, Отказ = Ложь, СообщениеОбОшибке = "", ГенерироватьИсключение = Истина) Экспорт
	
	Если http_ответ.КодСостояния = 200 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	КодСостояния = http_ответ.КодСостояния;
	
	Если КодСостояния >= 300 И КодСостояния < 400 Тогда
		
		СообщениеОбОшибке = СтрШаблон("Ошибка перенаправления вызова http сервиса: %1: %2", КодСостояния, "Запрошен, но не обработан редирект");
		
	ИначеЕсли КодСостояния >= 400 И КодСостояния < 500 Тогда
		
		Если КодСостояния = 405 Тогда
			
			СтрокаСообщения = ПолучитьСтрокуИзТелаHTTPОбъекта(http_ответ);
			СообщениеОбОшибке = СтрШаблон("Ошибка в работе http сервиса: %1", СтрокаСообщения);
			
		Иначе
			
			СообщениеОбОшибке = СтрШаблон("Ошибка доступа к http сервису: %1", КодСостояния);
			
		КонецЕсли;
		
	Иначе
		
		СообщениеОбОшибке = СтрШаблон("Неизвестная ошибка вызова http сервиса: %1", КодСостояния);
		
	КонецЕсли;
	
	Если ГенерироватьИсключение Тогда
		http_ответ = Неопределено;
		http_запрос = Неопределено;
		ВызватьИсключение (СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаС_HTTP_Запросом

Функция ПолучитьСтрокуИзТелаHTTPОбъекта(Запрос, Знач Кодировка = Неопределено) Экспорт
	
	ОписаниеТипа = ПолучитьЗначениеЗаголовка("Content-Type", Запрос.Заголовки);
	ТелоРезультат = Неопределено;
	
	Если Кодировка = Неопределено Тогда
		Кодировка = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Если СтрНайти(ОписаниеТипа, "application/json") > 0 Тогда //;charset=utf-8
		ТелоРезультат = Запрос.ПолучитьТелоКакСтроку(Кодировка);
	ИначеЕсли СтрНайти(ОписаниеТипа, "application/xml") Тогда
		ТелоРезультат = Запрос.ПолучитьТелоКакСтроку(Кодировка);
	ИначеЕсли СтрНайти(ОписаниеТипа, "raw") Тогда
		//multipart/form-data
		//application/x-www-form-urlencoded
		//application/bzip
		
		//ТелоЗапроса = Запрос.ПолучитьТелоКакДвоичныеДанные();
		ТелоРезультат = "";
		
	ИначеЕсли СтрНайти(ОписаниеТипа, "text") Тогда	
		
		ТелоРезультат = Запрос.ПолучитьТелоКакСтроку(Кодировка);
		
	КонецЕсли;
		
	Возврат ТелоРезультат;
	
КонецФункции

Функция ПолучитьXDTOИзТелаHTTPОбъекта(Запрос) Экспорт
	
	ОписаниеТипа = ПолучитьЗначениеЗаголовка("Content-Type", Запрос.Заголовки);
	ТелоРезультат = Неопределено;
	
	Если СтрНайти(ОписаниеТипа, "application/json") > 0 Тогда //;charset=utf-8
		
		ЧитаемаяСтрока = Запрос.ПолучитьТелоКакСтроку();
		Если НЕ ПустаяСтрока(ЧитаемаяСтрока) Тогда
			
			текЧтение = Новый ЧтениеJSON;
			текЧтение.УстановитьСтроку(ЧитаемаяСтрока);
			Если Не ТекЧтение = Неопределено Тогда
				ТелоРезультат = ФабрикаXDTO.ПрочитатьJSON(текЧтение);
			КонецЕсли;
			
		Иначе
			
			ТелоРезультат = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ОписаниеТипа, "application/xml") Тогда
		
		ЧитаемаяСтрока = Запрос.ПолучитьТелоКакСтроку();
		Если НЕ ПустаяСтрока(ЧитаемаяСтрока) Тогда
			
			текЧтение = Новый ЧтениеXML;
			текЧтение.УстановитьСтроку(ЧитаемаяСтрока);
			Если Не ТекЧтение = Неопределено Тогда
				ТелоРезультат = ФабрикаXDTO.ПрочитатьXML(текЧтение);
			КонецЕсли;
			
		Иначе
			
			ТелоРезультат = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ОписаниеТипа, "raw") Тогда
		//multipart/form-data
		//application/x-www-form-urlencoded
		
		//ТелоЗапроса = Запрос.ПолучитьТелоКакДвоичныеДанные();
		
	ИначеЕсли СтрНайти(ОписаниеТипа, "text") Тогда	
		
		//ТелоРезультат = Запрос.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
		
	Возврат ТелоРезультат;
	
КонецФункции

Функция ПолучитьЗначениеЗаголовка(Заголовок, ВсеЗаголовки, Ключ = Неопределено) Экспорт
	
	Для Каждого ОчереднойЗаголовок Из ВсеЗаголовки Цикл
		Если НРег(ОчереднойЗаголовок.Ключ) = НРег(Заголовок) Тогда
			Ключ = ОчереднойЗаголовок.Ключ;
			Возврат ОчереднойЗаголовок.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПараметрыЗапроса(Запрос, СтрокаПараметров) Экспорт
	
	СтруктураПараметров = Новый Структура(СтрокаПараметров);
	
	//ЗаполнитьЗначенияСвойств(СтруктураПараметров, Запрос.ПараметрыЗапроса, СтрокаПараметров);
	Для Каждого ОписаниеПараметра ИЗ СтруктураПараметров Цикл
		СтруктураПараметров[ОписаниеПараметра.Ключ] = Запрос.ПараметрыЗапроса.Получить(ОписаниеПараметра.Ключ);
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция СтрокаПараметровДляЗапроса(СтруктураПараметров) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Для Каждого ОписаниеПараметра Из СтруктураПараметров Цикл
		
		ИмяПараметра = ОписаниеПараметра.Ключ;
		ЗначениеПараметра = ОписаниеПараметра.Значение;
		JSONЗначениеПараметра = ЗначениеВJSON(ЗначениеПараметра);
		
		СтрокаПараметра = СтрШаблон("%1=%2", ИмяПараметра, JSONЗначениеПараметра);
		МассивПараметров.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	СтрокаПараметров = "";
	Если МассивПараметров.Количество() > 0 Тогда
		СтрокаПараметров = "?" + СтрСоединить(МассивПараметров, "&");
	КонецЕсли;
	
	Возврат СтрокаПараметров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыЗаписиJSONПоУмолчанию() Экспорт
	
	//ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "   ");
	Возврат ПараметрыЗаписи;
	
КонецФункции

Функция НастройкаСериализацииJSONПоУмолчанию() Экспорт
	
	НастройкаСериализации = Новый НастройкиСериализацииJSON();	
	НастройкаСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкаСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Возврат НастройкаСериализации;

КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
