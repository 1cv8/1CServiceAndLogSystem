
Процедура ОтложеннаяОбработкаИсключенийВБазах1С() Экспорт

	ЗаполнитьСсылкиНаИсключенияВРегистре();
	ОбработатьНовыеИсключенияВБазах1С();
	
КонецПроцедуры


#Область ПроцедурыОбновленияСтатистикиПоИсключениям

Процедура ОбработатьНовыеИсключенияВБазах1С() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьОтложеннойОбработчиИсключенийВБазах1C.База1С КАК База1С,
	|	ОчередьОтложеннойОбработчиИсключенийВБазах1C.ID КАК ID,
	|	ОчередьОтложеннойОбработчиИсключенийВБазах1C.ДатаСобытия КАК ДатаСобытия,
	|	ИсключенияВБазах1С.ДатаСобытия КАК ДатаИсключения,
	|	ИсключенияВБазах1С.ИсключениеСсылка КАК ИсключениеСсылка,
	|	ИсключенияВБазах1С.ТекстОшибки КАК ТекстОшибки,
	|	ИсключенияВБазах1С.Пользователь КАК Пользователь,
	|	ИсключенияВБазах1С.Компьютер КАК Компьютер,
	|	ИсключенияВБазах1С.КоличествоСобытий КАК КоличествоСобытий,
	|	ИсключенияВБазах1С.Версия КАК Версия,
	|	ИсключенияВБазах1С.ДатаСобытия КАК ДатаПервого,
	|	ИсключенияВБазах1С.ДатаСобытия КАК ДатаПоследнего
	|ИЗ
	|	РегистрСведений.ОчередьОтложеннойОбработчиИсключенийВБазах1C КАК ОчередьОтложеннойОбработчиИсключенийВБазах1C
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияВБазах1С КАК ИсключенияВБазах1С
	|		ПО ОчередьОтложеннойОбработчиИсключенийВБазах1C.База1С = ИсключенияВБазах1С.База1С
	|			И ОчередьОтложеннойОбработчиИсключенийВБазах1C.ID = ИсключенияВБазах1С.ID
	|ГДЕ
	|	ИсключенияВБазах1С.ИсключениеСсылка <> Значение(Справочник.ИсключенияВБазах1С.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ID),
	|	МИНИМУМ(ДатаПервого),
	|	МАКСИМУМ(ДатаПоследнего)
	|ПО
	|	База1С,
	|	ИсключениеСсылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаБаза = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБаза.Следующий() Цикл
		
		ВыборкаИсключение = ВыборкаБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИсключение.Следующий() Цикл
			
			Отказ = Ложь;
			СообщениеОбОшибке = "";
			ОбработатьИсключениеВБазах1С(ВыборкаИсключение, Отказ, СообщениеОбОшибке);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИсключениеВБазах1С(ВыборкаИсключение, Отказ, СообщениеОбОшибке)
	
	НачатьТранзакцию();
	Попытка
		
		ОбновитьСтатистикуПоИсключению(ВыборкаИсключение.База1С, ВыборкаИсключение.ИсключениеСсылка, ВыборкаИсключение.ID, ВыборкаИсключение.ДатаПервого, ВыборкаИсключение.ДатаПоследнего);
		
		//ЭтоПерваяСтрока = Истина;
		
		Выборка = ВыборкаИсключение.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//Если ЭтоПерваяСтрока Тогда
			//	ЭтоПерваяСтрока = Ложь;
			//КонецЕсли;
			
			УдалитьИсключениеИзОчереди(Выборка);
			
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьСтатистикуПоИсключению(База1С, ИсключениеСсылка, КоличествоСобытий, ДатаПервого, ДатаПоследнего) Экспорт
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаПоИсключениямВБазах1С");
	ЭлементБлокировки.УстановитьЗначение("База1С", База1С);
	ЭлементБлокировки.УстановитьЗначение("Исключение", ИсключениеСсылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НЗ = РегистрыСведений.СтатистикаПоИсключениямВБазах1С.СоздатьНаборЗаписей();
	НЗ.Отбор.База1С.Установить(База1С, Истина);
	НЗ.Отбор.Исключение.Установить(ИсключениеСсылка, Истина);
	
	НЗ.Прочитать();
	
	ЭтоНовый = Ложь;
	Если НЗ.Количество() > 0 Тогда
		СтрокаСтатистики = НЗ[0];
	Иначе
		ЭтоНовый = Истина;
		
		СтрокаСтатистики = НЗ.Добавить();
		СтрокаСтатистики.База1С = База1С;
		СтрокаСтатистики.Исключение = ИсключениеСсылка;
		
		СтрокаСтатистики.ДатаПервого = ДатаПервого;
		
	КонецЕсли;
	
	СтрокаСтатистики.Количество = СтрокаСтатистики.Количество + КоличествоСобытий;
	СтрокаСтатистики.ДатаПоследнего = Макс(ДатаПоследнего, СтрокаСтатистики.ДатаПоследнего);
	
	Если СтрокаСтатистики.Решение = Перечисления.ВариантыРешенийПоИсключениям.Исправлено
		И СтрокаСтатистики.ДатаИсправления < ДатаПоследнего Тогда
		
		СтрокаСтатистики.Решение = Перечисления.ВариантыРешенийПоИсключениям.ПустаяСсылка();
		СтрокаСтатистики.РанееИсправлялось = СтрокаСтатистики.РанееИсправлялось + 1;
		
		СтрокаСтатистики.ОповещениеОтправлено = Ложь;
		
	КонецЕсли;
	
	НЗ.ОбменДанными.Загрузка = Истина;
	НЗ.Записать(НЕ ЭтоНовый);
	
КонецПроцедуры

Процедура УдалитьИсключениеИзОчереди(ДанныеСобытия)
	
	МЗ = РегистрыСведений.ОчередьОтложеннойОбработчиИсключенийВБазах1C.СоздатьМенеджерЗаписи();
	МЗ.База1С = ДанныеСобытия.База1С;
	МЗ.ID = ДанныеСобытия.ID;
	МЗ.Удалить();
	
	//НЗ = РегистрыСведений.ОчередьОтложеннойОбработчиИсключенийВБазах1C.СоздатьНаборЗаписей();
	//НЗ.Отбор.База1С.Установить(ДанныеСобытия.База1С, Истина);
	//НЗ.Отбор.ID.Установить(ДанныеСобытия.ID, Истина);
	//
	//НЗ.ОбменДанными.Загрузка = Истина;
	//НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ПересчитатьСтатистикуПоИсключению(База1С, ИсключениеСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаПоИсключениямВБазах1С");
	ЭлементБлокировки.УстановитьЗначение("База1С", База1С);
	ЭлементБлокировки.УстановитьЗначение("Исключение", ИсключениеСсылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("База1С", База1С);
	Запрос.УстановитьПараметр("ИсключениеСсылка", ИсключениеСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсключенияВБазах1С.База1С КАК База1С,
	|	ИсключенияВБазах1С.ИсключениеСсылка КАК ИсключениеСсылка,
	|	МИНИМУМ(ИсключенияВБазах1С.ДатаСобытия) КАК ДатаПервого,
	|	МАКСИМУМ(ИсключенияВБазах1С.ДатаСобытия) КАК ДатаПоследнего,
	|	СУММА(1) КАК КоличествоСобытий
	|ИЗ
	|	РегистрСведений.ИсключенияВБазах1С КАК ИсключенияВБазах1С
	|ГДЕ
	|	ИсключенияВБазах1С.ИсключениеСсылка = &ИсключениеСсылка
	|	И ИсключенияВБазах1С.База1С = &База1С
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсключенияВБазах1С.База1С,
	|	ИсключенияВБазах1С.ИсключениеСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоСобытий = Выборка.КоличествоСобытий;
		ДатаПервого = Выборка.ДатаПервого;
		ДатаПоследнего = Выборка.ДатаПоследнего;
	Иначе
		КоличествоСобытий = 0;
		ДатаПервого = Дата(1,1,1);
		ДатаПоследнего = Дата(1,1,1);
	КонецЕсли;
	
	НЗ = РегистрыСведений.СтатистикаПоИсключениямВБазах1С.СоздатьНаборЗаписей();
	НЗ.Отбор.База1С.Установить(База1С, Истина);
	НЗ.Отбор.Исключение.Установить(ИсключениеСсылка, Истина);
	
	НЗ.Прочитать();
	
	ЭтоНовый = Ложь;
	Если НЗ.Количество() > 0 Тогда
		
		СтрокаСтатистики = НЗ[0];
		
	Иначе
		
		ЭтоНовый = Истина;
		
		СтрокаСтатистики = НЗ.Добавить();
		СтрокаСтатистики.База1С = База1С;
		СтрокаСтатистики.Исключение = ИсключениеСсылка;
		
		СтрокаСтатистики.ДатаПервого = ДатаПервого;
		
	КонецЕсли;
	
	СтрокаСтатистики.Количество = КоличествоСобытий;
	СтрокаСтатистики.ДатаПоследнего = ДатаПоследнего;
	СтрокаСтатистики.ДатаПервого = ДатаПервого;
	
	НЗ.ОбменДанными.Загрузка = Истина;
	НЗ.Записать(НЕ ЭтоНовый);

КонецПроцедуры

#КонецОбласти

Функция ОрганизацииИсключений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеБазы.База1С КАК База1С
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтатистикаПоИсключениямВБазах1С.База1С КАК База1С
	|	ИЗ
	|		РегистрСведений.СтатистикаПоИсключениямВБазах1С КАК СтатистикаПоИсключениямВБазах1С
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтатистикаПоИсключениямВБазах1С.База1С) КАК ВсеБазы
	|ГДЕ
	|	НЕ ВсеБазы.База1С.ПометкаУдаления";
	
	МассивБаз = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("База1С");
	
	Возврат МассивБаз;
	
КонецФункции

Функция ХэшПоТекстамИсключений(ИмяСобытия, ТекстИсключения) Экспорт

	//// откат на старую версию
	//ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA512);
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(СокрЛП(ТекстИсключения));
	ХэшТекстИсключения = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
	//// откат на старую версию
	//ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA512);
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(СокрЛП(ИмяСобытия));
	ХэшИмяСобытия = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
	Хэш = ХэшИмяСобытия + ХэшТекстИсключения;
	
	Возврат Хэш;
	
КонецФункции

Процедура ФормированиеОповещенийОбИсключениях() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаПолучателейИсключенийПоУмолчанию", Константы.ГруппаПолучателейИсключенийПоУмолчанию.Получить());
	
	ГруппаОбязательныхПолучателейИсключений = Константы.ГруппаОбязательныхПолучателейИсключений.Получить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатистикаПоИсключениямВБазах1С.База1С КАК База1С,
	|	СтатистикаПоИсключениямВБазах1С.Исключение КАК Исключение,
	|	СтатистикаПоИсключениямВБазах1С.ОповещениеОтправлено КАК ОповещениеОтправлено,
	|	СтатистикаПоИсключениямВБазах1С.РанееИсправлялось КАК РанееИсправлялось,
	|	СтатистикаПоИсключениямВБазах1С.Решение КАК Решение,
	|	СтатистикаПоИсключениямВБазах1С.ДатаПервого КАК ДатаПервого,
	|	СтатистикаПоИсключениямВБазах1С.ДатаПоследнего КАК ДатаПоследнего,
	|	СтатистикаПоИсключениямВБазах1С.ДатаИсправления КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА НЕ СтатистикаПоИсключениямВБазах1С.Исключение.ГруппаРассылки ЕСТЬ NULL
	|				И СтатистикаПоИсключениямВБазах1С.Исключение.ГруппаРассылки <> ЗНАЧЕНИЕ(Справочник.ГруппыПолучателейРассылок.ПустаяСсылка)
	|			ТОГДА СтатистикаПоИсключениямВБазах1С.Исключение.ГруппаРассылки
	|		КОГДА НЕ СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный.ФизическоеЛицо ЕСТЬ NULL
	|				И СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный.ФизическоеЛицо
	|		КОГДА НЕ НастройкиИсключенийПоУмолчанию.ГруппаПолучателейИсключенийПоУмолчанию ЕСТЬ NULL
	|				И НастройкиИсключенийПоУмолчанию.ГруппаПолучателейИсключенийПоУмолчанию <> ЗНАЧЕНИЕ(Справочник.ГруппыПолучателейРассылок.ПустаяСсылка)
	|			ТОГДА НастройкиИсключенийПоУмолчанию.ГруппаПолучателейИсключенийПоУмолчанию
	|		ИНАЧЕ &ГруппаПолучателейИсключенийПоУмолчанию
	|	КОНЕЦ КАК ГруппаПолучателей,
	|	СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный КАК ИсключениеОтветственный,
	|	НастройкиИсключенийПоУмолчанию.ГруппаОбязательныхПолучателейИсключений КАК ГруппаОбязательныхПолучателейИсключений
	|ИЗ
	|	РегистрСведений.СтатистикаПоИсключениямВБазах1С КАК СтатистикаПоИсключениямВБазах1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИсключенийПоУмолчанию КАК НастройкиИсключенийПоУмолчанию
	|		ПО СтатистикаПоИсключениямВБазах1С.База1С = НастройкиИсключенийПоУмолчанию.База1С
	|ГДЕ
	|	НЕ СтатистикаПоИсключениямВБазах1С.ОповещениеОтправлено
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Исключение)
	|ПО
	|	База1С,
	|	ГруппаПолучателей,
	|	ГруппаОбязательныхПолучателейИсключений";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаБаза = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБаза.Следующий() Цикл
		
		ВыборкаГруппаПолучателей = ВыборкаБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппаПолучателей.Следующий() Цикл
			
			ВыборкаГруппаОбязательныхПолучателей = ВыборкаГруппаПолучателей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаГруппаОбязательныхПолучателей.Следующий() Цикл
				
				НачатьТранзакцию();
				Попытка
					
					ВыборкаИсключение = ВыборкаГруппаОбязательныхПолучателей.Выбрать();
					Пока ВыборкаИсключение.Следующий() Цикл
						
						Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаПоИсключениямВБазах1С");
						ЭлементБлокировки.УстановитьЗначение("База1С", ВыборкаБаза.База1С);
						ЭлементБлокировки.УстановитьЗначение("Исключение", ВыборкаИсключение.Исключение);
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						Блокировка.Заблокировать();
						
					КонецЦикла;
					
					ВыборкаИсключение = ВыборкаГруппаОбязательныхПолучателей.Выбрать();
					СформироватьПисьмоОИсключенияхКОБработке(
						ВыборкаБаза.База1С,
						ВыборкаГруппаПолучателей.ГруппаПолучателей,
						ВыборкаГруппаОбязательныхПолучателей.ГруппаОбязательныхПолучателейИсключений,
						ГруппаОбязательныхПолучателейИсключений,
						ВыборкаИсключение
					);
					
					ВыборкаИсключение = ВыборкаГруппаОбязательныхПолучателей.Выбрать();
					Пока ВыборкаИсключение.Следующий() Цикл
						
						УстановитьПризнакОтправленоВСтатистикуПоИсключению(ВыборкаБаза.База1С, ВыборкаИсключение.Исключение);
						
					КонецЦикла;
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ВызватьИсключение (ТекстОшибки);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция СформироватьПисьмоОИсключенияхКОБработке(База1С, ГруппаПолучателей, ГруппаОбязательныхПолучателейИсключений, ГруппаОбязательныхПолучателейИсключенийПоУмолчанию, ВыборкаИсключение, ЭтоОтложенные = Ложь)
	
	ИсключениеСсылка = ВыборкаИсключение.Исключение;
	
	РезультатОтправки = Неопределено;
	
	ЭтоРассылкаЛинк = Ложь;
	
	СписокПолучателей = Новый СписокЗначений;
	СписокПолучателейКопии = Новый СписокЗначений;

	Если ЗначениеЗаполнено(ГруппаПолучателей) Тогда
		
		Если ТипЗнч(ГруппаПолучателей) = Тип("СправочникСсылка.ГруппыПолучателейРассылок") Тогда
			Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
			Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаПолучателей,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
		Иначе
			Справочники.ГруппыПолучателейРассылок.ДобавитьПолучателяВПриемник(СписокПолучателей, ГруппаПолучателей, ЭтоРассылкаЛинк, Ложь, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаОбязательныхПолучателейИсключений) Тогда
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОбязательныхПолучателейИсключений,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОбязательныхПолучателейИсключений,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаОбязательныхПолучателейИсключенийПоУмолчанию) Тогда
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОбязательныхПолучателейИсключенийПоУмолчанию,	ЭтоРассылкаЛинк,	"Получатели",	СписокПолучателей,		Ложь,	Ложь,	Истина);
		Справочники.ГруппыПолучателейРассылок.ЗаполнитьМассивАдресатовРассылки(ГруппаОбязательныхПолучателейИсключенийПоУмолчанию,	ЭтоРассылкаЛинк,	"Копии",		СписокПолучателейКопии, Ложь,	Ложь,	Истина);
	КонецЕсли;

	мТекстПисьма =
	"<!DOCTYPE html>
	|<html lang=""ru"">
	|<head>
	|<meta charset=""UTF-8"">
	|<style>
	|td{border: 1px solid black;text-align: center;}
	|table{border-collapse: collapse;}
	|</style>
	|</head>
	|<body>
	|";
	
	мТекстПисьма = мТекстПисьма + "
	|<p>Добрый день!</p>";
	
	Если ЭтоОтложенные Тогда
		мТекстПисьма = мТекстПисьма + "
		|<p>Возвращены к обработке исключения в базе:  %База1С%</p>";
	Иначе
		мТекстПисьма = мТекстПисьма + "
		|<p>Обнаружены новые исключения в базе:  %База1С%</p>";
	КонецЕсли;
	мТекстПисьма = СтрЗаменить(мТекстПисьма, "%База1С%", База1С);
	
	
	СтильТД		= "style='background: #365F91; text-align: center; border-width: 1px; padding: 1px 2px; border-style: solid; border-color: black;'";
	СтильШрифт	= "style='font-size:9.0pt;font-family:Arial;color:white'";
	СтильТДлево = "style='background: #FFFFFF; text-align:  left; border: 1px solid #000000; padding: 1px 2px;'>";
	СтильТДправ = "style='background: #FFFFFF; text-align: right; border: 1px solid #000000; padding: 1px 2px;'>";

	
	ТекстHTML = "
	| <table style='border-collapse: collapse; font-family: Arial; font-size: 10pt;'>
	|    <tr>
	|		<td " + СтильТД + "><b " + СтильШрифт + ">№ п/п</b></td>
	|		<td " + СтильТД + "><b " + СтильШрифт + ">Описание ошибки</b></td>
	|		<td " + СтильТД + "><b " + СтильШрифт + ">Дата последго события</b></td>
	|		<td " + СтильТД + "><b " + СтильШрифт + ">Исправлялось (раз)</b></td>
	|	</tr>";
	
	
	Сч = 0;
	Пока ВыборкаИсключение.Следующий() Цикл
		
		Сч = Сч + 1;
		
		ТекстHTML = ТекстHTML + "
		|	<tr>
		|		<td " + СтильТДправ + Формат(Сч, "ЧГ=") + "</td>
		|		<td " + СтильТДлево + ВыборкаИсключение.Исключение + "</td>
		|		<td " + СтильТДлево + ВыборкаИсключение.ДатаПоследнего + "</td>
		|		<td " + СтильТДлево + ВыборкаИсключение.РанееИсправлялось + "</td>
		|	</tr>";
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "
	|</table>";
	
	мТекстПисьма = мТекстПисьма + "
	|" + ТекстHTML;

	мТекстПисьма = мТекстПисьма + "
	|<p>С уважением, <br>1C Robot</p>";
	
	мТекстПисьма = мТекстПисьма + "
	|
	|</body>
	|</html>";
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	
	Сообщение.Отправитель.Адрес = "1crobot@lancetpharm.ru";
	
	Если ЭтоОтложенные Тогда
		Сообщение.Тема = "Возвращены к обработке исключения в базе: " + База1С;
	Иначе
		Сообщение.Тема = "Обнаружены новые исключения в базе: " + База1С;
	КонецЕсли;
	
	Текст = Сообщение.Тексты.Добавить();
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Текст.Текст = мТекстПисьма;
	
	Для Каждого ОписаниеАдреса Из СписокПолучателей Цикл
		Сообщение.Получатели.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;

	Для Каждого ОписаниеАдреса Из СписокПолучателейКопии Цикл
		Сообщение.Копии.Добавить(ОписаниеАдреса.Значение);
	КонецЦикла;
	
	УИДПисьма = РегистрыСведений.УС_ОчередьПочта.СоздатьЗаписьИзСообщения(Сообщение);
	Если ЗначениеЗаполнено(УИДПисьма) Тогда
		РезультатОтправки = Новый Структура("УИДПисьма", УИДПисьма);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура УстановитьПризнакОтправленоВСтатистикуПоИсключению(База1С, ИсключениеСсылка)
	
	ЗаписатьРеквизитыВСтатистику(База1С, ИсключениеСсылка, Новый Структура("ОповещениеОтправлено", Истина));
	
КонецПроцедуры

Процедура ОтметитьИсправлениеИсключения(База1С, ИсключениеСсылка, ДатаРешения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		РеквизитыСтатистики = Новый Структура("Решение, ДатаИсправления", Перечисления.ВариантыРешенийПоИсключениям.Исправлено, ДатаРешения);
		ЗаписатьРеквизитыВСтатистику(База1С, ИсключениеСсылка, РеквизитыСтатистики);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ИсключенияВБазах1С");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ИсключениеСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДанныеИсключения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсключениеСсылка, "Ответственный");
		
		Если ДанныеИсключения.Ответственный <> Пользователи.АвторизованныйПользователь() Тогда
			
			СпрОБ = ИсключениеСсылка.ПолучитьОбъект();
			СпрОБ.Ответственный = Пользователи.АвторизованныйПользователь();
			
			СпрОБ.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение (ТекстОшибки);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьИгнорИсключения(База1С, ИсключениеСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Пользователи.РолиДоступны("ПравоПереводитьИсключенияВСтатусИгнорировать") Тогда
		ВызватьИсключение "Нарушение прав доступа: ""Перевод исключения в статус игнорировать""";
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		РеквизитыСтатистики = Новый Структура("Решение", Перечисления.ВариантыРешенийПоИсключениям.Игнорировать);
		ЗаписатьРеквизитыВСтатистику(База1С, ИсключениеСсылка, РеквизитыСтатистики);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ИсключенияВБазах1С");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ИсключениеСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДанныеИсключения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсключениеСсылка, "Ответственный");
		
		Если ДанныеИсключения.Ответственный <> Пользователи.АвторизованныйПользователь() Тогда
			
			СпрОБ = ИсключениеСсылка.ПолучитьОбъект();
			СпрОБ.Ответственный = Пользователи.АвторизованныйПользователь();
			
			СпрОБ.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение (ТекстОшибки);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОтложитьОбработкуИсключения(База1С, ИсключениеСсылка, ДатаРешения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		РеквизитыСтатистики = Новый Структура("Решение, ДатаИсправления", Перечисления.ВариантыРешенийПоИсключениям.Отложено, ДатаРешения);
		ЗаписатьРеквизитыВСтатистику(База1С, ИсключениеСсылка, РеквизитыСтатистики);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ИсключенияВБазах1С");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ИсключениеСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДанныеИсключения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсключениеСсылка, "Ответственный");
		
		Если ДанныеИсключения.Ответственный <> Пользователи.АвторизованныйПользователь() Тогда
			
			СпрОБ = ИсключениеСсылка.ПолучитьОбъект();
			СпрОБ.Ответственный = Пользователи.АвторизованныйПользователь();
			
			СпрОБ.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение (ТекстОшибки);
	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВозвратОтложенныхИсключенийКОбработке() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ГруппаПолучателейИсключенийПоУмолчанию", Константы.ГруппаПолучателейИсключенийПоУмолчанию.Получить());
	
	ГруппаОбязательныхПолучателейИсключений = Константы.ГруппаОбязательныхПолучателейИсключений.Получить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатистикаПоИсключениямВБазах1С.База1С КАК База1С,
	|	СтатистикаПоИсключениямВБазах1С.Исключение КАК Исключение,
	|	СтатистикаПоИсключениямВБазах1С.ОповещениеОтправлено КАК ОповещениеОтправлено,
	|	СтатистикаПоИсключениямВБазах1С.РанееИсправлялось КАК РанееИсправлялось,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыРешенийПоИсключениям.ПустаяСсылка) КАК Решение,
	|	СтатистикаПоИсключениямВБазах1С.ДатаПервого КАК ДатаПервого,
	|	СтатистикаПоИсключениямВБазах1С.ДатаПоследнего КАК ДатаПоследнего,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА НЕ СтатистикаПоИсключениямВБазах1С.Исключение.ГруппаРассылки ЕСТЬ NULL
	|				И СтатистикаПоИсключениямВБазах1С.Исключение.ГруппаРассылки <> ЗНАЧЕНИЕ(Справочник.ГруппыПолучателейРассылок.ПустаяСсылка)
	|			ТОГДА СтатистикаПоИсключениямВБазах1С.Исключение.ГруппаРассылки
	|		КОГДА НЕ СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный.ФизическоеЛицо ЕСТЬ NULL
	|				И СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный.ФизическоеЛицо
	|		КОГДА НЕ НастройкиИсключенийПоУмолчанию.ГруппаПолучателейИсключенийПоУмолчанию ЕСТЬ NULL
	|				И НастройкиИсключенийПоУмолчанию.ГруппаПолучателейИсключенийПоУмолчанию <> ЗНАЧЕНИЕ(Справочник.ГруппыПолучателейРассылок.ПустаяСсылка)
	|			ТОГДА НастройкиИсключенийПоУмолчанию.ГруппаПолучателейИсключенийПоУмолчанию
	|		ИНАЧЕ &ГруппаПолучателейИсключенийПоУмолчанию
	|	КОНЕЦ КАК ГруппаПолучателей,
	|	СтатистикаПоИсключениямВБазах1С.Исключение.Ответственный КАК ИсключениеОтветственный,
	|	НастройкиИсключенийПоУмолчанию.ГруппаОбязательныхПолучателейИсключений КАК ГруппаОбязательныхПолучателейИсключений
	|ИЗ
	|	РегистрСведений.СтатистикаПоИсключениямВБазах1С КАК СтатистикаПоИсключениямВБазах1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИсключенийПоУмолчанию КАК НастройкиИсключенийПоУмолчанию
	|		ПО СтатистикаПоИсключениямВБазах1С.База1С = НастройкиИсключенийПоУмолчанию.База1С
	|ГДЕ
	|	СтатистикаПоИсключениямВБазах1С.Решение = ЗНАЧЕНИЕ(Перечисление.ВариантыРешенийПоИсключениям.Отложено)
	|	И СтатистикаПоИсключениямВБазах1С.ДатаИсправления <= &ТекДата
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Исключение)
	|ПО
	|	База1С,
	|	ГруппаПолучателей,
	|	ГруппаОбязательныхПолучателейИсключений";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаБаза = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБаза.Следующий() Цикл
		
		ВыборкаГруппаПолучателей = ВыборкаБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппаПолучателей.Следующий() Цикл
			
			ВыборкаГруппаОбязательныхПолучателей = ВыборкаГруппаПолучателей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаГруппаОбязательныхПолучателей.Следующий() Цикл
				
				НачатьТранзакцию();
				Попытка
					
					ВыборкаИсключение = ВыборкаГруппаОбязательныхПолучателей.Выбрать();
					Пока ВыборкаИсключение.Следующий() Цикл
						
						Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаПоИсключениямВБазах1С");
						ЭлементБлокировки.УстановитьЗначение("База1С", ВыборкаБаза.База1С);
						ЭлементБлокировки.УстановитьЗначение("Исключение", ВыборкаИсключение.Исключение);
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						Блокировка.Заблокировать();
						
					КонецЦикла;
					
					ВыборкаИсключение = ВыборкаГруппаОбязательныхПолучателей.Выбрать();
					СформироватьПисьмоОИсключенияхКОБработке(
						ВыборкаБаза.База1С,
						ВыборкаГруппаПолучателей.ГруппаПолучателей,
						ВыборкаГруппаОбязательныхПолучателей.ГруппаОбязательныхПолучателейИсключений,
						ГруппаОбязательныхПолучателейИсключений,
						ВыборкаИсключение,
						Истина
					);
					
					ВыборкаИсключение = ВыборкаГруппаОбязательныхПолучателей.Выбрать();
					Пока ВыборкаИсключение.Следующий() Цикл
						
						ЗаписатьРеквизитыВСтатистику(
							ВыборкаБаза.База1С,
							ВыборкаИсключение.Исключение,
							Новый Структура(
								"ОповещениеОтправлено, Решение, ДатаИсправления",
								Истина, Перечисления.ВариантыРешенийПоИсключениям.ПустаяСсылка(), Дата(1,1,1)
								)
						);
						
					КонецЦикла;
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ВызватьИсключение (ТекстОшибки);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьРеквизитыВСтатистику(Знач База1С, Знач ИсключениеСсылка, СтруктураРеквизитов) Экспорт
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатистикаПоИсключениямВБазах1С");
		ЭлементБлокировки.УстановитьЗначение("База1С", База1С);
		ЭлементБлокировки.УстановитьЗначение("Исключение", ИсключениеСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НЗ = РегистрыСведений.СтатистикаПоИсключениямВБазах1С.СоздатьНаборЗаписей();
		НЗ.Отбор.База1С.Установить(База1С, Истина);
		НЗ.Отбор.Исключение.Установить(ИсключениеСсылка, Истина);
		
		НЗ.Прочитать();
		
		ЭтоНовый = Ложь;
		Если НЗ.Количество() > 0 Тогда
			СтрокаСтатистики = НЗ[0];
		Иначе
			ЭтоНовый = Истина;
			
			СтрокаСтатистики = НЗ.Добавить();
			СтрокаСтатистики.База1С = База1С;
			СтрокаСтатистики.Исключение = ИсключениеСсылка;
			
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		Для Каждого ОписаниеРеквизита Из СтруктураРеквизитов Цикл
			Если СтрокаСтатистики[ОписаниеРеквизита.Ключ] <> ОписаниеРеквизита.Значение Тогда
				СтрокаСтатистики[ОписаниеРеквизита.Ключ] = ОписаниеРеквизита.Значение;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			НЗ.ОбменДанными.Загрузка = Истина;
			НЗ.Записать(НЕ ЭтоНовый);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение (ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьРеквизитыВИсторию(Знач База1С = Неопределено, Знач ИсключениеСсылка, СтруктураРеквизитов) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		База1С = Справочники.БазыДанных1С.ПустаяСсылка();
	КонецЕсли;
	
	ДатаСобытия = ТекущаяДатаСеанса();
	ОтветственныйЗаИзменение = Пользователи.АвторизованныйПользователь();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИсторияОбработкиИсключенийБаз1С");
		ЭлементБлокировки.УстановитьЗначение("База1С", База1С);
		ЭлементБлокировки.УстановитьЗначение("Исключение", ИсключениеСсылка);
		ЭлементБлокировки.УстановитьЗначение("ДатаСобытия", ДатаСобытия);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НЗ = РегистрыСведений.ИсторияОбработкиИсключенийБаз1С.СоздатьНаборЗаписей();
		НЗ.Отбор.База1С.Установить(База1С, Истина);
		НЗ.Отбор.Исключение.Установить(ИсключениеСсылка, Истина);
		НЗ.Отбор.ДатаСобытия.Установить(ДатаСобытия, Истина);
		
		НЗ.Прочитать();
		
		ЭтоНовый = Ложь;
		Если НЗ.Количество() > 0 Тогда
			СтрокаСтатистики = НЗ[0];
		Иначе
			ЭтоНовый = Истина;
			
			СтрокаСтатистики = НЗ.Добавить();
			СтрокаСтатистики.База1С = База1С;
			СтрокаСтатистики.Исключение = ИсключениеСсылка;
			СтрокаСтатистики.ДатаСобытия = ДатаСобытия;
			
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		Для Каждого ОписаниеРеквизита Из СтруктураРеквизитов Цикл
			
			Если СтрокаСтатистики[ОписаниеРеквизита.Ключ] <> ОписаниеРеквизита.Значение Тогда
				СтрокаСтатистики[ОписаниеРеквизита.Ключ] = ОписаниеРеквизита.Значение;
				ЕстьИзменения = Истина;
			КонецЕсли;
			
		КонецЦикла;

		СтрокаСтатистики.ОтветственныйЗаИзменение = ОтветственныйЗаИзменение;
		
		Если ЕстьИзменения Тогда

			НЗ.ОбменДанными.Загрузка = Истина;
			НЗ.Записать(НЕ ЭтоНовый);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение (ТекстОшибки);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВернутьВРаботуИсключение(База1С, ИсключениеСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		РеквизитыСтатистики = Новый Структура("Решение, ДатаИсправления", Перечисления.ВариантыРешенийПоИсключениям.ПустаяСсылка(), Дата(1,1,1));
		ЗаписатьРеквизитыВСтатистику(База1С, ИсключениеСсылка, РеквизитыСтатистики);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение (ТекстОшибки);
	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ЗагрузитьМассивСообщенийЖРБазы(База1С, МассивСообщений, Отказ, СообщениеОбОшибке) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Тело Из МассивСообщений Цикл
		
			ДатаСобытия = Тело["ДатаСообщения"];
			Если ЗначениеЗаполнено(ДатаСобытия) Тогда
				ДатаСобытия = ПрочитатьДатуJSON(ДатаСобытия, ФорматДатыJSON.ISO);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
				ВызватьИсключение ("Не заполнена ""Дата события""");
			КонецЕсли;
			
			Пользователь = СтруктураСерверовПовтИсп.ПользовательБазыПоИмени(Тело["ИмяПользователя"], База1С);
			Компьютер = СтруктураСерверовПовтИсп.КомпьютерПользователяПоИмени(Тело["Компьютер"]);
			Версия = СтруктураСерверовПовтИсп.ВерсияБазыДанных(Тело["ВерсияБазы"], База1С);
			
			IDСообщения = Новый УникальныйИдентификатор();
			
			НЗ = РегистрыСведений.ИсключенияВБазах1С.СоздатьНаборЗаписей();
			НЗ.Отбор.База1С.Установить(База1С);
			НЗ.Отбор.ДатаСобытия.Установить(ДатаСобытия);
			НЗ.Отбор.ID.Установить(IDСообщения);
			
			ЗаписьИсключения = НЗ.Добавить();
			
			ЗаписьИсключения.База1С = База1С;
			ЗаписьИсключения.ДатаСобытия = ДатаСобытия;
			ЗаписьИсключения.ID = IDСообщения;
			
			ЗаписьИсключения.Пользователь = Пользователь;
			ЗаписьИсключения.Компьютер = Компьютер;
			ЗаписьИсключения.КоличествоСобытий = 1;
			
			ЗаписьИсключения.ТекстОшибки = Тело["Комментарий"];
			ЗаписьИсключения.Метаданные = Тело["Метаданные"];
			ЗаписьИсключения.ПредставлениеМетаданных = Тело["ПредставлениеМетаданных"];
			ЗаписьИсключения.Событие = Тело["ПредставлениеСобытия"];
			
			ЗаписьИсключения.Версия = Версия;
			
			//ИмяСобытия = Тело["ИмяСобытия"];
			//ТекстИсключения = Тело["ТекстИсключения"];
			//ТекстОшибки = Тело["Комментарий"];
			//Если НЕ ЗначениеЗаполнено(ТекстОшибки) И  НЕ ЗначениеЗаполнено(ИмяСобытия) Тогда
			//	ВызватьИсключение ("Не заполнена ""Текст ошибки""");
			//КонецЕсли;
			
			//ИсключениеСсылка = ЖурналИсключений.СсылкаНаИсключение(ИмяСобытия, ТекстИсключения);
			//ЗаписьИсключения.ИсключениеСсылка = ИсключениеСсылка;

			НЗ.ОбменДанными.Загрузка = Истина;
			НЗ.Записать(Ложь);
			
			
			НЗ = РегистрыСведений.ОчередьОтложеннойОбработчиИсключенийВБазах1C.СоздатьНаборЗаписей();
			НЗ.Отбор.База1С.Установить(База1С);
			НЗ.Отбор.ID.Установить(IDСообщения);
			
			ЗаписьИсключения = НЗ.Добавить();
			ЗаписьИсключения.База1С = База1С;
			ЗаписьИсключения.ID = IDСообщения;

			ЗаписьИсключения.ДатаСобытия = ДатаСобытия;
			
			НЗ.ОбменДанными.Загрузка = Истина;
			НЗ.Записать(Ложь);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
		
		Отказ = Истина;
		
	КонецПопытки;
	
КонецФункции

Функция Базы1СИсключения(ИсключениеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключениеСсылка", ИсключениеСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсключенияВБазах1С.База1С КАК База1С
	|ИЗ
	|	РегистрСведений.ИсключенияВБазах1С КАК ИсключенияВБазах1С
	|ГДЕ
	|	ИсключенияВБазах1С.ИсключениеСсылка = &ИсключениеСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсключенияВБазах1С.База1С";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("База1С");
	
КонецФункции

#Область ПроцедурыЗаполненияСсылокНаИсключения

Процедура ЗаполнитьСсылкиНаИсключенияВРегистре() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьОтложеннойОбработчиИсключенийВБазах1C.База1С КАК База1С,
	|	ОчередьОтложеннойОбработчиИсключенийВБазах1C.ID КАК ID,
	|	ОчередьОтложеннойОбработчиИсключенийВБазах1C.ДатаСобытия КАК ДатаСобытия,
	|	ИсключенияВБазах1С.ТекстОшибки КАК ТекстОшибки,
	|	ИсключенияВБазах1С.Метаданные КАК Метаданные,
	|	ИсключенияВБазах1С.ПредставлениеМетаданных КАК ПредставлениеМетаданных,
	|	ИсключенияВБазах1С.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.ОчередьОтложеннойОбработчиИсключенийВБазах1C КАК ОчередьОтложеннойОбработчиИсключенийВБазах1C
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияВБазах1С КАК ИсключенияВБазах1С
	|		ПО ОчередьОтложеннойОбработчиИсключенийВБазах1C.База1С = ИсключенияВБазах1С.База1С
	|			И ОчередьОтложеннойОбработчиИсключенийВБазах1C.ID = ИсключенияВБазах1С.ID
	|			И (ИсключенияВБазах1С.ИсключениеСсылка = ЗНАЧЕНИЕ(Справочник.ИсключенияВБазах1С.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиЗаполнения = НастройкиЗаполненияСсылокНаИсключение();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаполнитьСсылкуНаИсключение(Выборка, НастройкиЗаполнения);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				"Регламент.ЗаполнитьСсылкиНаИсключенияВРегистре",
				УровеньЖурналаРегистрации.Ошибка,
				,,
				"Ошибка заполнения ссылки для ID: " + Выборка.ID + Символы.ПС + ТекстОшибки
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСсылкуНаИсключение(Выборка, НастройкиЗаполнения) Экспорт
	
	ИмяСобытия = СокрЛП(Выборка.Событие);
	Комментарий = Выборка.ТекстОшибки;
	ТекстИсключения = "";
	
	Если НастройкиЗаполнения.СобытияБезМодуля.Получить(ИмяСобытия) <> Неопределено Тогда
		ТекстИсключения = "";
	Иначе
		ТекстИсключения = ПолучитьМодульОшибкиИзСообщения(Комментарий, ИмяСобытия, НастройкиЗаполнения);
		Если ПустаяСтрока(ТекстИсключения) Тогда
			ТекстИсключения = ШаблонИзСообщения(Комментарий, НастройкиЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Выборка.Метаданные, "РегламентноеЗадание")
		И НЕ ПустаяСтрока(Выборка.ПредставлениеМетаданных) Тогда
		
		ИмяСобытия = СокрЛП(Выборка.ПредставлениеМетаданных) + ": " + ИмяСобытия;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяСобытия, "Получение файлов из Интернета") Тогда
		
		ТекстИсключения = ПолучитьТекстИсключенияПФИ(ТекстИсключения);
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекстИсключения, "В результате проведения документа обнаружен отрицательный резерв по позиции") Тогда
		ТекстИсключения = "В результате проведения документа обнаружен отрицательный резерв по позиции";
	ИначеЕсли СтрНачинаетсяС(ТекстИсключения, "В результате проведения документа обнаружен отрицательный остаток") Тогда
		ТекстИсключения = "В результате проведения документа обнаружен отрицательный остаток";
	ИначеЕсли СтрНачинаетсяС(ТекстИсключения, "Истекает срок исполнения задачи") Тогда
		ТекстИсключения = "Истекает срок исполнения задачи";
	КонецЕсли;
	
	ЭтоDatareon = Ложь;
	Если СтрНачинаетсяС(ИмяСобытия, "Datareon") Тогда
		ТекстИсключения = СообщениеБезНомераВерсииОбработчикаDatareon(ТекстИсключения, НастройкиЗаполнения);
		ЭтоDatareon = Истина;
	КонецЕсли;
	
	ТекстИсключения = СообщениеБезПутиКФайлу(ТекстИсключения, НастройкиЗаполнения);
	ТекстИсключения = СообщениеБезТекстаHTML(ТекстИсключения, НастройкиЗаполнения);
	
	
	ТекстИсключения = СтрЗаменить(ТекстИсключения, Символы.Таб, " ");
	ТекстИсключения = СтрЗаменить(ТекстИсключения, "     ", " ");
	ТекстИсключения = СтрЗаменить(ТекстИсключения, "    ", " ");
	ТекстИсключения = СтрЗаменить(ТекстИсключения, "   ", " ");
	ТекстИсключения = СтрЗаменить(ТекстИсключения, "  ", " ");
	ТекстИсключения = СтрЗаменить(ТекстИсключения, "  ", " ");
	
	МассивСтрок = СтрРазделить(ТекстИсключения, Символы.ПС, Ложь);
	МассивКУдалению = Новый Массив;
	
	Инд = МассивСтрок.Количество();
	Пока Инд > 0 Цикл
		
		СтрокаСообщения = МассивСтрок[Инд-1];
		Если ПустаяСтрока(СтрокаСообщения) Тогда
			МассивСтрок.Удалить(Инд-1);
		Иначе
			
			Если ЭтоDatareon Тогда
				
				НачПоз = СтрНайти(СтрокаСообщения, "Запись с такими ключевыми полями существует!");
				Если НачПоз > 0 Тогда
					МассивСтрок[Инд-1] = Лев(СтрокаСообщения, НачПоз + 44);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
		Инд = Инд - 1;
		
	КонецЦикла;
	
	ТекстИсключения = СтрСоединить(МассивСтрок, Символы.ПС);
	ТекстИсключенияШаблон = ШаблонИзТекстаИсключения(ТекстИсключения, НастройкиЗаполнения);
	
	ИсключениеСсылка = СсылкаНаИсключение(ИмяСобытия, ТекстИсключения, ТекстИсключенияШаблон);
	
	НЗ = РегистрыСведений.ИсключенияВБазах1С.СоздатьНаборЗаписей();
	НЗ.Отбор.База1С.Установить(Выборка.База1С);
	НЗ.Отбор.ДатаСобытия.Установить(Выборка.ДатаСобытия);
	НЗ.Отбор.ID.Установить(Выборка.ID);
	
	НЗ.Прочитать();

	ЗаписьИсключения = НЗ[0];
	ЗаписьИсключения.ИсключениеСсылка = ИсключениеСсылка;
	
	НЗ.ОбменДанными.Загрузка = Истина;
	НЗ.Записать(Истина);
	
	Возврат ЗаписьИсключения.ИсключениеСсылка;
	
КонецФункции


Функция НастройкиЗаполненияСсылокНаИсключение()
	
	СобытияБезМодуля = Новый Соответствие;
	СобытияБезМодуля.Вставить("_КонтрольРасторженияГК", 0);
	СобытияБезМодуля.Вставить("Тестирование связи", 0);
	СобытияБезМодуля.Вставить("КонтрольОстатков.ПартииТоваров", 0);
	СобытияБезМодуля.Вставить("КонтрольОстатков.СвободныйОстаток", 0);
	СобытияБезМодуля.Вставить("КонтрольОстатков.РезервыНаСкладах", 0);
	СобытияБезМодуля.Вставить("КонтрольОстатков.ТоварыНаСкладах", 0);
	СобытияБезМодуля.Вставить("КонтрольОстатков.ТоварыОрганизаций", 0);
	
	RegExp = Обработки._ирОболочкаРегВыражение.Создать();
	RegExp.IgnoreCase = Истина;
	RegExp.Global = Истина;
	
	Результат = Новый Структура;
	Результат.Вставить("СобытияБезМодуля", СобытияБезМодуля);
	Результат.Вставить("RegExp", RegExp);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМодульОшибкиИзСообщения(ТекстСообщения, ИмяСобытия, НастройкиЗаполнения)
	
	МодульОшибки = "";
	
	Если ИмяСобытия = "Получение файлов из Интернета" Тогда
		
		ПозКонец = СтрНайти(ТекстСообщения, "Результат диагностики:");
		Если ПозКонец > 0 Тогда
			МодульОшибки = Лев(ТекстСообщения, ПозКонец-1);
			Возврат МодульОшибки;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Ошибка отправки письма" Тогда
		Если СтрНайти(ТекстСообщения, "Письмо не может быть отправлено, т.к. не указаны получатели!") > 0 Тогда
			МодульОшибки = "Письмо не может быть отправлено, т.к. не указаны получатели!";
			Возврат МодульОшибки;
		КонецЕсли;
	КонецЕсли;	
	
	Если ИмяСобытия = "Получение файлов из Интернета"
		//ИЛИ ИмяСобытия = "Ошибка выполнения"
		ИЛИ ИмяСобытия = "Datareon. Обработка сообщения"
		ИЛИ ИмяСобытия = "Ошибка отправки почты"
		//ИЛИ ИмяСобытия = "Фоновое задание. Ошибка выполнения"
		ИЛИ ИмяСобытия = "Тестирование связи"
		//ИЛИ ИмяСобытия = "Ошибка отправки письма"
		ИЛИ ИмяСобытия = "КонтрольОстатков.ПартииТоваров"
		Тогда
		
	ИначеЕсли ИмяСобытия = "Диагностика соединения" Тогда
		
		Попытка
			МодульОшибки = СтрРазделить(ТекстСообщения, Символы.ПС, Ложь)[0];
			
			///При обращении по URL: /epz/order/notice/zk20/view/protocol/protocol-main-info.html?regNumber=0373200029723000975&protocolId=40308329
			//ТекстСообщения = СообщениеБезUrl_1(ТекстСообщения, НастройкиЗаполнения);
			
			ПозПараметры = СтрНайти(МодульОшибки, "?");
			Если ПозПараметры > 0 Тогда
		    	МодульОшибки = Лев(МодульОшибки, ПозПараметры-1);
			КонецЕсли;
			
		Исключение
			МодульОшибки = "";
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "Ошибка выполнения" Тогда
		
		Если СтрНайти(ТекстСообщения, "у сотрудника") > 0 Тогда
			МассивМодулейОшибки = RtgExpВсеВхождения(НастройкиЗаполнения.RegExp, ТекстСообщения, "{(.*?)\}:", Истина);
			Если МассивМодулейОшибки.Количество() > 0 Тогда 
				Возврат СтрСоединить(МассивМодулейОшибки, Символы.ПС);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МассивМодулейОшибки = RtgExpВсеВхождения(НастройкиЗаполнения.RegExp, ТекстСообщения, "{(.*?)\}:", Истина);
		Если МассивМодулейОшибки.Количество() > 0 Тогда 
			Возврат СтрСоединить(МассивМодулейОшибки, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МодульОшибки;
	
КонецФункции

Функция ШаблонИзСообщения(Знач ТекстСообщения, НастройкиЗаполнения)
	
	ТекстСообщения = СообщениеБезНомерИДатыДокумента(ТекстСообщения, НастройкиЗаполнения);
	ТекстСообщения = СообщениеБезСсылок(ТекстСообщения, НастройкиЗаполнения);
	ТекстСообщения = СообщениеБезID(ТекстСообщения, НастройкиЗаполнения);
	ТекстСообщения = СообщениеБезВремени(ТекстСообщения, НастройкиЗаполнения);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СообщениеБезНомерИДатыДокумента(Знач ТекстСообщения, НастройкиЗаполнения)
	
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"([^\s]+\sот\s[\d]{2}\.[\d]{2}\.[\d]{4}\s[\d]{1,2}:[\d]{2}:[\d]{2})",
		Истина
	);

	Для Каждого СтрокаНомерДата ИЗ МассивВхождений Цикл
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаНомерДата, "xxx от xx.xx.xxxx");
		
	КонецЦикла;
	
	//МассивВхождений = RtgExpВсеВхождения(
	//	НастройкиЗаполнения.RegExp,
	//	ТекстСообщения,
	//	"(№[^\s]+\sот\s[\d]{2}\.[\d]{2}\.[\d]{4}\s[\d]{1,2}:[\d]{2}:[\d]{2})",
	//	Истина
	//);
	//
	//Для Каждого СтрокаНомерДата ИЗ МассивВхождений Цикл
	//	
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаНомерДата, "xxx от xx.xx.xxxx");
	//	
	//КонецЦикла;
	
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(№[^\s]+\sот\s[\d]{2}\.[\d]{2}\.[\d]{4})",
		Истина
	);
	
	Для Каждого СтрокаНомерДата ИЗ МассивВхождений Цикл
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаНомерДата, "xxx от xx.xx.xxxx");
		
	КонецЦикла;
		
	Возврат ТекстСообщения;
	
КонецФункции

Функция СообщениеБезНомераВерсииОбработчикаDatareon(Знач ТекстСообщения, НастройкиЗаполнения)
	
	// При выполнении обработчика ЗапросДанных_UPPIN [Версия: 6]
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(При выполнении обработчика [^\n]+ \[Версия: [\d]+])",
		Истина
	);

	Для Каждого СтрокаЗамены ИЗ МассивВхождений Цикл
		
		НоваяСтрока = СтрокаЗамены;
		МассивВхождений2 = RtgExpВсеВхождения(
			НастройкиЗаполнения.RegExp,
			НоваяСтрока,
			"([\d]+)",
			Истина
		);
		
		Для каждого СтрокаЗамены2 Из МассивВхождений2 Цикл
			НоваяСтрока = СтрЗаменить(НоваяСтрока, СтрокаЗамены2, "x");
		КонецЦикла;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаЗамены, НоваяСтрока);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СообщениеБезПутиКФайлу(Знач ТекстСообщения, НастройкиЗаполнения)
	
	// При выполнении обработчика ЗапросДанных_UPPIN [Версия: 6]
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"([C,D,E,F,X,Y,Z]{1}:\\[^\s]+)",
		Истина
	);

	Для Каждого СтрокаЗамены ИЗ МассивВхождений Цикл
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаЗамены, "[xxx]");
		
	КонецЦикла;
	
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(файл(у|ам){0,1}[:]?[\s]*\'[^\r]*\')",
		Истина
	);

	Для Каждого СтрокаЗамены ИЗ МассивВхождений Цикл
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаЗамены, "файл '\\[xxx]'");
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СообщениеБезТекстаHTML(Знач ТекстСообщения, НастройкиЗаполнения)
	
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(\<html\>[\w|\W]*\</html\>)",
		Истина
	);

	Для Каждого СтрокаЗамены ИЗ МассивВхождений Цикл
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаЗамены, "");
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СообщениеБезID(Знач ТекстСообщения, НастройкиЗаполнения)
	
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"([^\s]{8}-[^\s]{4}-[^\s]{4}-[^\s]{4}-[^\s]{12})",
		Истина
	);

	//RegExp = Новый COMОбъект("VBScript.RegExp");
	//RegExp.Pattern = "([^\s]{8}-[^\s]{4}-[^\s]{4}-[^\s]{4}-[^\s]{12})";
	//RegExp.Global = Истина; //Поиск всех вхождений шаблона
	//Matches=RegExp.Execute(ТекстСообщения);
	//ЧислоВхождений=Matches.Count();
	//
	//МассивВхождений = Новый Массив;
	//
	//Если ЧислоВхождений>0 Тогда 
	//	
	//	МассивВхождений = Новый Массив;
	//	Для Индекс = 0 По ЧислоВхождений-1 Цикл
	//		МассивВхождений.Добавить(Matches.Item(Индекс).SubMatches(0));
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	Для Каждого СтрокаНомерДата ИЗ МассивВхождений Цикл
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаНомерДата, "ID");
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СообщениеБезСсылок(Знач ТекстСообщения, НастройкиЗаполнения)

	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(http[s]{0,1}://[^\s]+)",
		Истина
	);

	//RegExp = Новый COMОбъект("VBScript.RegExp");
	//RegExp.Pattern = "(http[s]{0,1}://[^\s]+)";
	//RegExp.Global = Истина;
	//Matches=RegExp.Execute(ТекстСообщения);
	//ЧислоВхождений=Matches.Count();
	//
	//МассивВхождений = Новый Массив;
	//Если ЧислоВхождений>0 Тогда 
	//	
	//	МассивВхождений = Новый Массив;
	//	Для Индекс = 0 По ЧислоВхождений-1 Цикл
	//		МассивВхождений.Добавить(Matches.Item(Индекс).SubMatches(0));
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	Для Каждого СтрокаHTTP ИЗ МассивВхождений Цикл
		
		СтрокиHTTP = СтрРазделить(СтрокаHTTP, "/", Истина);
		Пока СтрокиHTTP.Количество() > 3 Цикл
			СтрокиHTTP.Удалить(СтрокиHTTP.Количество()-1);
		КонецЦикла;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаHTTP, СтрСоединить(СтрокиHTTP, "/")) + "\...\";
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СообщениеБезВремени(Знач ТекстСообщения, НастройкиЗаполнения)
	
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(([\d]+[\x{00A0}\s])*[\d]+ (мс|с|сек))",
		Истина
	);

	Для Каждого СтрокаНомерДата ИЗ МассивВхождений Цикл
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаНомерДата, "xxx");
		
	КонецЦикла;
		
	Возврат ТекстСообщения;
	
КонецФункции

Функция ШаблонИзТекстаИсключения(ТекстИсключения, НастройкиЗаполнения)
	
	RegExp = НастройкиЗаполнения.RegExp;
	RegExp.Pattern = "(\([\d]+\))"; // {ОбщийМодуль._МАА_Процедуры.Модуль(29711)}:
	RegExp.Global = Истина; //Поиск всех вхождений шаблона
	RegExp.IgnoreCase = Истина;
	
	Вывод = RegExp.Заменить(ТекстИсключения, "(X)");
	Если ЗначениеЗаполнено(Вывод) Тогда
		Возврат Вывод;
	КонецЕсли;
	
	Возврат ТекстИсключения;
	
КонецФункции


Функция СсылкаНаИсключение(ИмяСобытия, ТекстИсключения, ТекстИсключенияШаблон) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяСобытия)
		И НЕ ЗначениеЗаполнено(ТекстИсключения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Хэш = ХэшПоТекстамИсключений(ИмяСобытия, ТекстИсключения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хэш", Хэш);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсключенияВБазах1С.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсключенияВБазах1С КАК ИсключенияВБазах1С
	|ГДЕ
	|	ИсключенияВБазах1С.Хэш = &Хэш";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	
	ХэшШаблон = ХэшПоТекстамИсключений(ИмяСобытия, ТекстИсключенияШаблон);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ХэшШаблон", ХэшШаблон);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсключенияВБазах1С.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсключенияВБазах1С КАК ИсключенияВБазах1С
	|ГДЕ
	|	ИсключенияВБазах1С.ХэшШаблон = &ХэшШаблон";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	
	ИсключениеСсылка = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ИсключенияВБазах1С");
		ЭлементБлокировки.УстановитьЗначение("Хэш", Хэш);
		Блокировка.Заблокировать();
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ИсключениеСсылка = Выборка.Ссылка;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИсключениеСсылка) Тогда
			
			ИсключениеОбъект = Справочники.ИсключенияВБазах1С.СоздатьЭлемент();
			
			ИсключениеОбъект.Хэш = Хэш;
			ИсключениеОбъект.ХэшШаблон = ХэшШаблон;
			
			ИсключениеОбъект.ИмяСобытия = СокрЛП(ИмяСобытия);
			ИсключениеОбъект.ТекстИсключения = СокрЛП(ТекстИсключения);
			ИсключениеОбъект.ТекстИсключенияШаблон = СокрЛП(ТекстИсключенияШаблон);
			
			Если ЗначениеЗаполнено(ИсключениеОбъект.ИмяСобытия) И ЗначениеЗаполнено(ИсключениеОбъект.ТекстИсключения) Тогда
				НаименованиеСобытия = ИсключениеОбъект.ИмяСобытия + ": " + ИсключениеОбъект.ТекстИсключения;
			ИначеЕсли ЗначениеЗаполнено(ИсключениеОбъект.ИмяСобытия) Тогда
				НаименованиеСобытия = ИсключениеОбъект.ИмяСобытия;
			Иначе
				НаименованиеСобытия = ИсключениеОбъект.ТекстИсключения;
			КонецЕсли;
			
			НаименованиеСобытия = СтрЗаменить(НаименованиеСобытия, Символы.ПС, " ");
			НаименованиеСобытия = СтрЗаменить(НаименованиеСобытия, "   ", " ");
			НаименованиеСобытия = СтрЗаменить(НаименованиеСобытия, "  ", " ");
			НаименованиеСобытия = СтрЗаменить(НаименованиеСобытия, "  ", " ");
			
			ИсключениеОбъект.Наименование = НаименованиеСобытия;
			
			ИсключениеОбъект.Записать();
			
			ИсключениеСсылка = ИсключениеОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИсключениеСсылка;
	
КонецФункции

Функция ПолучитьТекстИсключенияПФИ(ТекстИсключения)
	
	Результат = "";
	ПозНач = СтрНайти(ТекстИсключения, "Не удалось получить файл");
	Если ПозНач > 0 Тогда
		ПозНачКонСтр = СтрНайти(ТекстИсключения, Символы.ПС,, ПозНач);
		Результат = Лев(ТекстИсключения, ПозНачКонСтр);
	КонецЕсли;
	
	ПозКон = СтрНайти(ТекстИсключения, "по причине:");
	Если ПозКон > 0 Тогда
		
		Результат = Результат + Сред(ТекстИсключения, ПозКон);
		ПозКон1 = СтрНайти(Результат, "HTTP запрос:");
		Если ПозКон > 0 Тогда
			Результат = Лев(Результат, ПозКон1-1);
		КонецЕсли;
		
		ПозКон2 = СтрНайти(ТекстИсключения, "Код ответа:");
		Если ПозКон2 > 0 Тогда
			ПозКон2КонСтр = СтрНайти(ТекстИсключения, Символы.ПС,, ПозКон2);
			Результат = Результат + Символы.ПС + Сред(ТекстИсключения, ПозКон2, ПозКон2КонСтр-ПозКон2);
		КонецЕсли;
		
	Иначе
		Результат = ТекстИсключения;
	КонецЕсли;
	
	ПозКон3 = СтрНайти(Результат, "Сообщение, полученное от сервера:");
	Если ПозКон3 > 0 Тогда
		Результат = Лев(Результат, ПозКон3-1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция RtgExpВсеВхождения(RegExp, Ввод, Pattern, Global, IgnoreCase = Истина)

	RegExp.Pattern = Pattern;
	RegExp.Global = Global; //Поиск всех вхождений шаблона
	RegExp.IgnoreCase = IgnoreCase;
	
	КоллекцияРезультат = RegExp.НайтиВхождения(Ввод);
	ЧислоВхождений = КоллекцияРезультат.Количество();
	
	МассивВхождений = Новый Массив;
	Если ЧислоВхождений>0 Тогда 
		
		Для Каждого ОписаниеВхождения Из КоллекцияРезультат Цикл
			МассивВхождений.Добавить(ОписаниеВхождения.Value);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВхождений;
	
КонецФункции


Функция СообщениеБезUrl_1(Знач ТекстСообщения, НастройкиЗаполнения)
	//При обращении по URL: /epz/order/notice/zk20/view/protocol/protocol-main-info.html?regNumber=0373200029723000975&protocolId=40308329

	Если СтрНайти(ТекстСообщения, "/epz/order/notice") <= 0 Тогда
		Возврат ТекстСообщения;
	КонецЕсли;
	
	// При выполнении обработчика ЗапросДанных_UPPIN [Версия: 6]
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(regNumber=[\d]+)",
		Истина
	);

	Для Каждого СтрокаЗамены ИЗ МассивВхождений Цикл
		
		НоваяСтрока = СтрокаЗамены;
		МассивВхождений2 = RtgExpВсеВхождения(
			НастройкиЗаполнения.RegExp,
			НоваяСтрока,
			"([\d]+)",
			Истина
		);
		
		Для каждого СтрокаЗамены2 Из МассивВхождений2 Цикл
			НоваяСтрока = СтрЗаменить(НоваяСтрока, СтрокаЗамены2, "x");
		КонецЦикла;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаЗамены, НоваяСтрока);
		
	КонецЦикла;
	
	// При выполнении обработчика ЗапросДанных_UPPIN [Версия: 6]
	МассивВхождений = RtgExpВсеВхождения(
		НастройкиЗаполнения.RegExp,
		ТекстСообщения,
		"(protocolId=[\d]+)",
		Истина
	);

	Для Каждого СтрокаЗамены ИЗ МассивВхождений Цикл
		
		НоваяСтрока = СтрокаЗамены;
		МассивВхождений2 = RtgExpВсеВхождения(
			НастройкиЗаполнения.RegExp,
			НоваяСтрока,
			"([\d]+)",
			Истина
		);
		
		Для каждого СтрокаЗамены2 Из МассивВхождений2 Цикл
			НоваяСтрока = СтрЗаменить(НоваяСтрока, СтрокаЗамены2, "x");
		КонецЦикла;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаЗамены, НоваяСтрока);
		
	КонецЦикла;
	
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

Функция ПерезаполнитьИсключениеВСобытиях(Исключения) Экспорт
	
	МассивВсехИсключений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исключения", Исключения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсключенияВБазах1С.База1С КАК База1С,
	|	ИсключенияВБазах1С.ID КАК ID,
	|	ИсключенияВБазах1С.ДатаСобытия КАК ДатаСобытия,
	|	ИсключенияВБазах1С.ТекстОшибки КАК ТекстОшибки,
	|	ИсключенияВБазах1С.Метаданные КАК Метаданные,
	|	ИсключенияВБазах1С.ПредставлениеМетаданных КАК ПредставлениеМетаданных,
	|	ИсключенияВБазах1С.Событие КАК Событие,
	|	ИсключенияВБазах1С.ИсключениеСсылка КАК ИсключениеСсылка
	|ИЗ
	|	РегистрСведений.ИсключенияВБазах1С КАК ИсключенияВБазах1С
	|ГДЕ
	|	ИсключенияВБазах1С.ИсключениеСсылка В(&Исключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия
	|ИТОГИ ПО
	|	ИсключениеСсылка,
	|	База1С";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивВсехИсключений;
	КонецЕсли;
	
	НастройкиЗаполнения = НастройкиЗаполненияСсылокНаИсключение();
	
	ВыборкаИсключение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсключение.Следующий() Цикл
		
		ВыборкаБаза = ВыборкаИсключение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаБаза.Следующий() Цикл
			
			МассивИсключений = Новый Массив;
			МассивИсключений.Добавить(ВыборкаИсключение.ИсключениеСсылка);
			
			НачатьТранзакцию();
			Попытка
				
				Выборка = ВыборкаБаза.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ИсключениеСсылка = ЗаполнитьСсылкуНаИсключение(Выборка, НастройкиЗаполнения);
					Если МассивИсключений.Найти(ИсключениеСсылка) = Неопределено Тогда
						МассивИсключений.Добавить(ИсключениеСсылка);
					КонецЕсли;
				
				КонецЦикла;
				
				Для Каждого ИсключениеСсылка ИЗ МассивИсключений Цикл

					ПересчитатьСтатистикуПоИсключению(ВыборкаБаза.База1С, ИсключениеСсылка);

					Если МассивВсехИсключений.Найти(ИсключениеСсылка) = Неопределено Тогда
						МассивВсехИсключений.Добавить(ИсключениеСсылка);
					КонецЕсли;
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ВызватьИсключение (ТекстОшибки);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивВсехИсключений;
	
КонецФункции



