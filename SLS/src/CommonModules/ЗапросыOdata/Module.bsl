
#Область ПрограммныйИнтерфейс

Функция ДанныеСсылкиВБазе(Знач База1С, Знач СсылкаВБазе, Знач Таймаут = 20) Экспорт

	HTTPСоединение = HTTPСоединениеКБазе1С(База1С, Таймаут);
	Заголовки = ЗаголовкиHTTPЗапроса();

	АдресРесурса = АдресРесурса(База1С,, СсылкаВБазе);

	АдресРесурса = АдресРесурса + "(guid'" + СсылкаВБазе.УИД + "')";
	
	АдресЗапроса = АдресРесурса + "?$format=json";
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
	//HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	HTTPОтвет = HTTPСоединениеПолучить(HTTPСоединение, HTTPЗапрос);
	
	КодОтвета = HTTPОтвет.КодСостояния;
	КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
	
	РезультатСтрока = "";
	Попытка
		РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		РезультатСтрока = "";
	КонецПопытки;
	
	Если НЕ КодОтвета_Успех Тогда
		
		ТекстСообщения = "Не удалось получить значение ссылки: " + СсылкаВБазе + " из базы: " + База1С + " по протоколу odata";
		Если ЗначениеЗаполнено(РезультатСтрока) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Текст ответа: " + РезультатСтрока;
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатСтрока);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Возврат ДанныеJSON;

КонецФункции

Функция ДанныеСпискаВБазе(Знач База1С, Знач ОбъектМетаданных, Знач Таймаут = 20, Знач OrderBy, Знач Select, Знач Filter = "", Знач expand = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(select) Тогда
		ВызватьИсключение "Запрещено получение списка без указания полей";
	КонецЕсли;
	
	ДанныеСписка = Новый Массив;
	
	HTTPСоединение = HTTPСоединениеКБазе1С(База1С, Таймаут);
	Заголовки = ЗаголовкиHTTPЗапроса();

	АдресРесурса = АдресРесурса(База1С, ОбъектМетаданных);

	ВсегоЭлементов = КоличествоЗаписейПоСоединению(HTTPСоединение, АдресРесурса, Заголовки, Filter);
	
	Если ВсегоЭлементов <= 0 Тогда
		Возврат ДанныеСписка;
	КонецЕсли;
	
	ПорцияЭлементов = 500;
	ПолученоЭлементов = 0;
	
	Пока (ПолученоЭлементов) < ВсегоЭлементов Цикл
		
		АдресЗапроса = АдресРесурса + "?$format=json";
		
		Если ПолученоЭлементов > 0 Тогда
			АдресЗапроса = АдресЗапроса + "&$skip=" + Формат(ПолученоЭлементов, "ЧГ=");
		КонецЕсли;
		
		Если (ПолученоЭлементов + ПорцияЭлементов) < ВсегоЭлементов Тогда
			АдресЗапроса = АдресЗапроса + "&$top=" + Формат(ПорцияЭлементов, "ЧГ=");
		КонецЕсли;
		
		АдресЗапроса = АдресЗапроса + "&$orderby=" + OrderBy;
		
		Если ЗначениеЗаполнено(expand) Тогда
			АдресЗапроса = АдресЗапроса + "&$expand=" + expand;
		КонецЕсли;

		Если ЗначениеЗаполнено(select) Тогда
			АдресЗапроса = АдресЗапроса + "&$select=" + select;
		КонецЕсли;

		Если ЗначениеЗаполнено(Filter) Тогда
			АдресЗапроса = АдресЗапроса + "&$filter=" + Filter;
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
		//HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		HTTPОтвет = HTTPСоединениеПолучить(HTTPСоединение, HTTPЗапрос);
		
		КодОтвета = HTTPОтвет.КодСостояния;
		КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
		
		РезультатСтрока = "";
		Попытка
			РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
		Исключение
			РезультатСтрока = "";
		КонецПопытки;
		
		Если НЕ КодОтвета_Успех Тогда
			
			ТекстСообщения = "Не удалось получить значение список: " + ОбъектМетаданных + " из базы: " + База1С + " по протоколу odata";
			Если ЗначениеЗаполнено(РезультатСтрока) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Текст ответа: " + РезультатСтрока;
			КонецЕсли;
			
			ВызватьИсключение (ТекстСообщения);
			
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатСтрока);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		МассивПолученный = ДанныеJSON.Получить("value");
		
		Для Каждого СтрокаПолученных Из МассивПолученный Цикл
			ДанныеСписка.Добавить(СтрокаПолученных);
		КонецЦикла;
		
		ПолученоЭлементов = ПолученоЭлементов + ПорцияЭлементов;
		
	КонецЦикла;
	
	Возврат ДанныеСписка;

КонецФункции

Функция ДанныеПервыхИзСпискаВБазе(Знач База1С, Знач ОбъектМетаданных, Знач Таймаут = 20, Знач top, Знач OrderBy, Знач Select, Знач Filter = "", Знач expand = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(select) Тогда
		ВызватьИсключение "Запрещено получение списка без указания полей";
	КонецЕсли;
	
	top = Число(top);
	Если НЕ ЗначениеЗаполнено(top) Тогда
		ВызватьИсключение "Запрещено получение списка без указания полей";
	КонецЕсли;

	HTTPСоединение = HTTPСоединениеКБазе1С(База1С, Таймаут);
	Заголовки = ЗаголовкиHTTPЗапроса();

	АдресРесурса = АдресРесурса(База1С, ОбъектМетаданных);
	АдресЗапроса = АдресРесурса + "?$format=json";

	АдресЗапроса = АдресЗапроса + "&$top=" + Формат(top, "ЧГ=");
	
	АдресЗапроса = АдресЗапроса + "&$orderby=" + OrderBy;
	
	Если ЗначениеЗаполнено(expand) Тогда
		АдресЗапроса = АдресЗапроса + "&$expand=" + expand;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(select) Тогда
		АдресЗапроса = АдресЗапроса + "&$select=" + select;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Filter) Тогда
		АдресЗапроса = АдресЗапроса + "&$filter=" + Filter;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
	//HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	HTTPОтвет = HTTPСоединениеПолучить(HTTPСоединение, HTTPЗапрос);
	
	КодОтвета = HTTPОтвет.КодСостояния;
	КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
	
	РезультатСтрока = "";
	Попытка
		РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		РезультатСтрока = "";
	КонецПопытки;
	
	Если НЕ КодОтвета_Успех Тогда
		
		ТекстСообщения = "Не удалось получить значение список: " + ОбъектМетаданных + " из базы: " + База1С + " по протоколу odata";
		Если ЗначениеЗаполнено(РезультатСтрока) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Текст ответа: " + РезультатСтрока;
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатСтрока);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ДанныеСписка = ДанныеJSON.Получить("value");
	
	Возврат ДанныеСписка;

КонецФункции

Функция КоличествоЗаписейВСписке(Знач База1С, Знач ОбъектМетаданных, Знач Таймаут = 20, Знач Filter = "") Экспорт
	
	HTTPСоединение = HTTPСоединениеКБазе1С(База1С, Таймаут);

	Заголовки = ЗаголовкиHTTPЗапроса();

	АдресРесурса = АдресРесурса(База1С, ОбъектМетаданных);

	ВсегоЭлементов = КоличествоЗаписейПоСоединению(HTTPСоединение, АдресРесурса, Заголовки, Filter);
	
	Возврат ВсегоЭлементов;
	
КонецФункции

Функция КоличествоЗаписейПоСоединению(HTTPСоединение, Знач АдресРесурса, Заголовки, Знач Filter = "")
	
	АдресЗапроса = АдресРесурса + "/$count";
	
	Если ЗначениеЗаполнено(Filter) Тогда
		АдресЗапроса = АдресЗапроса + "?$filter=" + Filter;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
	
	//HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	HTTPОтвет = HTTPСоединениеПолучить(HTTPСоединение, HTTPЗапрос);
	
	КодОтвета = HTTPОтвет.КодСостояния;
	КодОтвета_Успех = (КодОтвета >= 200 И КодОтвета <= 299);
	
	РезультатСтрока = "";
	Попытка
		РезультатСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		РезультатСтрока = "";
	КонецПопытки;
	
	Если КодОтвета_Успех Тогда
		Попытка
			ВсегоЭлементов = Число(РезультатСтрока);
		Исключение
			КодОтвета_Успех = Ложь;
		КонецПопытки;
	КонецЕсли;
		
	Если НЕ КодОтвета_Успех Тогда
		ТекстОшибки = "Ошибка получения количества элементов списка из внешней базы";
		Если ЗначениеЗаполнено(РезультатСтрока) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + "Текст ответа: " + РезультатСтрока;
		КонецЕсли;
		ВызватьИсключение (ТекстОшибки);
	КонецЕсли;
		
	Возврат ВсегоЭлементов;
	
КонецФункции

Функция ДатаДляЗапроса(Знач Дата) Экспорт
	
	Результат = "datetime'" + ЗаписатьДатуJSON(Дата, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата) + "'";
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьДатуOdata(Знач ДатаСтрокой) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаСтрокой) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Если СтрНайти(ДатаСтрокой, "Z") = 0
		И СтрНайти(ДатаСтрокой, "+") = 0 Тогда
		
		ДатаСтрокой = ДатаСтрокой + "+03:00"; // Локальная дата Москва
	КонецЕсли;
	
	Возврат ПрочитатьДатуJSON(ДатаСтрокой, ФорматДатыJSON.ISO);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция HTTPСоединениеКБазе1С(Знач База1С, Знач Таймаут = 20)
	
	ИмяСервера = База1С.ИмяСервераПубликации;
	Если НЕ ЗначениеЗаполнено(ИмяСервера) Тогда
		ВызватьИсключение ("Не заполнен адрес публикации базы: " + База1С);
	КонецЕсли;
	
	Порт = База1С.ПортПубликации;
	Если НЕ ЗначениеЗаполнено(Порт) Тогда
		Порт = 80;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
        ИмяСервера,
        Порт,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ИмяПользователяWebДоступ"),
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(База1С, "ПарольWebДоступ"),
		,
		Таймаут
    );
	
	Возврат HTTPСоединение;
	
КонецФункции

Функция ЗаголовкиHTTPЗапроса()
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Заголовки;
	
КонецФункции

Функция АдресРесурса(Знач База1С, Знач ОбъектМетаданных = Неопределено, Знач СсылкаВБазе = Неопределено)
	
	АдресРесурса = "";
	Если НЕ ЗначениеЗаполнено(База1С.ПутьКПубликацииНаСервере) Тогда
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ИмяВКластере);
	Иначе
		АдресРесурса = АдресРесурса + СокрЛП(База1С.ПутьКПубликацииНаСервере);
	КонецЕсли;
	
	АдресРесурса = АдресРесурса + "/odata/standard.odata";
	Если ЗначениеЗаполнено(СсылкаВБазе) Тогда
		
		АдресРесурса = АдресРесурса + "/" + ТипМетаданныхOdataСсылки(СсылкаВБазе) + "_" + СокрЛП(СсылкаВБазе.ИдентификаторМетаданных.Имя);
		
	Иначе
		
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ИмяМетаданных = СокрЛП(СтрРазделить(ОбъектМетаданных, ".")[1]);
			ТипМетаданных = СокрЛП(СтрРазделить(ОбъектМетаданных, ".")[0]);
		Иначе
			ИмяМетаданных = СокрЛП(ОбъектМетаданных.Имя);
			ТипМетаданных = СокрЛП(СтрРазделить(ОбъектМетаданных.ПолноеИмя, ".")[0]);
		КонецЕсли;
		
		АдресРесурса = АдресРесурса + "/" + ТипМетаданныхOdata(ТипМетаданных) + "_" + ИмяМетаданных;
		
	КонецЕсли;
	
	Возврат АдресРесурса;
	
КонецФункции


Функция ТипМетаданныхСсылки(СсылкаВБазе)
	
	Возврат СокрЛП(СтрРазделить(СсылкаВБазе.ИдентификаторМетаданных.ПолноеИмя, ".")[0]);
	
КонецФункции

Функция ТипМетаданныхOdataСсылки(СсылкаВБазе)
	
	ТипМетаданных = НРег(ТипМетаданныхСсылки(СсылкаВБазе));
	Возврат ТипМетаданныхOdata(ТипМетаданных);
	
КонецФункции

Функция ТипМетаданныхOdata(Знач ТипМетаданных)

	ТипМетаданных = НРег(ТипМетаданных);
	ТипМетаданныхOdata = "";
	
	Если ТипМетаданных = "справочник" Тогда
		ТипМетаданныхOdata = "Catalog";
	ИначеЕсли ТипМетаданных = "документ" Тогда
		ТипМетаданныхOdata = "Document";
	ИначеЕсли ТипМетаданных = "журналдокументов" Тогда
		ТипМетаданныхOdata = "DocumentJournal";
	ИначеЕсли ТипМетаданных = "константа" Тогда
		ТипМетаданныхOdata = "Constant";
	ИначеЕсли ТипМетаданных = "планобмена" Тогда
		ТипМетаданныхOdata = "ExchangePlan";
	ИначеЕсли ТипМетаданных = "плансчетов" Тогда
		ТипМетаданныхOdata = "ChartOfAccounts";
	ИначеЕсли ТипМетаданных = "планвидоврасчета" Тогда
		ТипМетаданныхOdata = "ChartOfCalculationTypes";
	ИначеЕсли ТипМетаданных = "планвидовхарактеристик" Тогда
		ТипМетаданныхOdata = "ChartOfCharacteristicTypes";
	ИначеЕсли ТипМетаданных = "регистрсведений" Тогда
		ТипМетаданныхOdata = "InformationRegister";
	ИначеЕсли ТипМетаданных = "регистрнакопления" Тогда
		ТипМетаданныхOdata = "AccumulationRegister";
	ИначеЕсли ТипМетаданных = "регистррасчета" Тогда
		ТипМетаданныхOdata = "CalculationRegister";
	ИначеЕсли ТипМетаданных = "регистрбухгалтерии" Тогда
		ТипМетаданныхOdata = "AccountingRegister";
	ИначеЕсли ТипМетаданных = "бизнеспроцесс" Тогда
		ТипМетаданныхOdata = "BusinessProcess";
	ИначеЕсли ТипМетаданных = "задача" Тогда
		ТипМетаданныхOdata = "Task";
	КонецЕсли;
	
	Возврат ТипМетаданныхOdata;

КонецФункции

Функция HTTPСоединениеПолучить(HTTPСоединение, HTTPЗапрос, СчРекурсии = 0)
	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	КодОтвета = HTTPОтвет.КодСостояния;
	Если СчРекурсии < 10 Тогда
		
		Если КодОтвета = 301
			ИЛИ КодОтвета = 302
			ИЛИ КодОтвета = 303
			ИЛИ КодОтвета = 307
			ИЛИ КодОтвета = 308 Тогда
			
			НовыйURL = ЗначениеЗаголовка("location", HTTPОтвет.Заголовки);
			Если ЗначениеЗаполнено(НовыйURL) Тогда
				//НовыйURL = КоннекторHTTP.СформироватьНовыйURLПриПеренаправлении(HTTPОтвет);
				НовыйURL = РаскодироватьСтроку(НовыйURL, СпособКодированияСтроки.URLВКодировкеURL);
				
				HTTPЗапрос.АдресРесурса = НовыйURL;
				Возврат HTTPСоединениеПолучить(HTTPСоединение, HTTPЗапрос, (СчРекурсии+1));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция ЗначениеЗаголовка(Заголовок, ВсеЗаголовки, Ключ = Неопределено)

	Для Каждого ОчереднойЗаголовок Из ВсеЗаголовки Цикл
		Если НРег(ОчереднойЗаголовок.Ключ) = НРег(Заголовок) Тогда
			Ключ = ОчереднойЗаголовок.Ключ;
			Возврат ОчереднойЗаголовок.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
