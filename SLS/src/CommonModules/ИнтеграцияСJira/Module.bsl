	
Процедура ЗагрузитьТипыЗапросовСтатусыИКатегории(Знач ПроектJira, Знач Таймаут = 120) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПроектJira) Тогда
		ВызватьИсключение "Не заполнен проект jira";
	КонецЕсли;
	
	СерверJira = ПроектJira.Владелец;
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		ВызватьИсключение "Не заполнен сервер jira";
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыПодключенияКСерверуjira(СерверJira);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПодключения) Тогда
		ВызватьИсключение "Не заполнены настройки подключения к серверу jira";
	КонецЕсли;
	
	Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	Порт = ПараметрыПодключения.Порт;
	Если НЕ ЗначениеЗаполнено(Порт) Тогда
		Порт = ?(ПараметрыПодключения.ЗащищенноеСоединение, 443, 80);
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.ИмяСервера, Порт, , , , Таймаут, ssl);
	
	СсылкаНаРесурс = ПараметрыПодключения.БазовыйURL + "/project/" + ПроектJira.КлючПроекта + "/statuses";
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс, ЗаголовкиHTTPЗапросаПодключенияКСерверуJira(ПараметрыПодключения));
	
	ОтветHTTP  = Соединение.Получить(HTTPЗапрос);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ВызватьИсключение "Не удалось начать отправку файла на удаленный сервис" + СообщениеОбОшибкеИзОтветаHTTP(ОтветHTTP);
	КонецЕсли;
	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаОтвет);
	ПолученныеДанные = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();
	
	Для Каждого type ИЗ ПолученныеДанные Цикл
		
		ТипЗапроса = ТипЗапросаJira(type.Получить("id"), ПроектJira,, type.Получить("name"), type.Получить("subtask"));
		
		statuses = type.Получить("statuses");
		Для Каждого status ИЗ statuses Цикл
			
			КатегорияСтатуса = Неопределено;
			statusCategory = status.Получить("statusCategory");
			Если statusCategory <> Неопределено Тогда
				КатегорияСтатуса = КатегорияСтатусаJira(statusCategory.Получить("id"), ПроектJira,, statusCategory.Получить("name"), statusCategory.Получить("key"));
			КонецЕсли;
			
			Статус = СтатусJira(status.Получить("id"), ТипЗапроса,, КатегорияСтатуса, status.Получить("name"), status.Получить("description"));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСписокЗадач(Знач ПроектJira, Знач ДатаН, Знач ДатаК, Знач ВсегоВыбрать = 5000, Знач Таймаут = 120, ЗагрузкаВыполнена = Ложь, ЭтоОбновление = Истина, ДатаПоследнейЗадачи = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПроектJira) Тогда
		ВызватьИсключение "Не заполнен проект jira";
	КонецЕсли;
	
	СерверJira = ПроектJira.Владелец;
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		ВызватьИсключение "Не заполнен сервер jira";
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыПодключенияКСерверуjira(СерверJira);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПодключения) Тогда
		ВызватьИсключение "Не заполнены настройки подключения к серверу jira";
	КонецЕсли;
		
	Порт = ПараметрыПодключения.Порт;
	Если НЕ ЗначениеЗаполнено(Порт) Тогда
		Порт = ?(ПараметрыПодключения.ЗащищенноеСоединение, 443, 80);
	КонецЕсли; 
	URL = "https://" + ПараметрыПодключения.ИмяСервера + ":" + Порт + "/rest/api/2/search"; 
	ПараметрыЗапроса = Новый Структура();  
	Если ЭтоОбновление Тогда
		ЗапросJQL = "project = '%ProjectKey%' & 'updated' >= '%ДатаН%' & 'updated' <= '%ДатаК%'";   
	Иначе
		ЗапросJQL = "project = '%ProjectKey%' & 'created' >= '%ДатаН%' & 'created' <= '%ДатаК%'";	
	КонецЕсли;
	ЗапросJQL = СтрЗаменить(ЗапросJQL, "%ProjectKey%", ПроектJira.КлючПроекта);
	ЗапросJQL = СтрЗаменить(ЗапросJQL, "%ДатаН%", ДатаДляJQL(ДатаН));
	ЗапросJQL = СтрЗаменить(ЗапросJQL, "%ДатаК%", ДатаДляJQL(ДатаК));	
	ПараметрыЗапроса.Вставить("jql", ЗапросJQL);
	Массив_fields = Новый Массив(); 
	Массив_fields.Добавить("id");
	Массив_fields.Добавить("key");
	Массив_fields.Добавить("self");
	Массив_fields.Добавить("updated");
	Массив_fields.Добавить("created");
	Массив_fields.Добавить("status");
	Массив_fields.Добавить("creator");
	Массив_fields.Добавить("reporter");
	Массив_fields.Добавить("issuetype");
	Массив_fields.Добавить("description");
	Массив_fields.Добавить("summary");
	Массив_fields.Добавить("assignee");
	Массив_fields.Добавить("comment");
	Массив_fields.Добавить("worklog");
	Массив_fields.Добавить("customfield_11504");
	Массив_fields.Добавить("customfield_11305");
	ПараметрыЗапроса.Вставить("fields", Массив_fields);
	Массив_expand = Новый Массив();    
	Массив_expand.Добавить("changelog");
	ПараметрыЗапроса.Вставить("expand", Массив_expand);
	
	ВсегоЭлементов = 500;
	maxResults = 100;
	startAt = 0;
	
	ДатаПоследнейЗадачи = Дата(1,1,1);
	
	КэшДанныхРеквизиты = Новый Соответствие;
	КэшДанныхТипыЗапросов = Новый Соответствие;
	
	Пока startAt < ВсегоЭлементов Цикл	
		ПараметрыЗапроса.Вставить("startAt", startAt);
		ПараметрыЗапроса.Вставить("maxResults", maxResults);
		
		ПолученныеДанные = УИ_КоннекторHTTP.PostJson(URL, ПараметрыЗапроса, ДополнительныеПараметры(ПараметрыПодключения, Истина));
		Если ПолученныеДанные <> Неопределено Тогда    
			
			ВсегоЭлементов = Мин(ВсегоВыбрать, ?(ПолученныеДанные.Получить("total") <> Неопределено, ПолученныеДанные.Получить("total"), 0));  
			текПолучено = 0;
			issues = ПолученныеДанные.Получить("issues"); 
			Если issues <> Неопределено Тогда 
				
				текПолучено = issues.Количество(); 
				Для Каждого issue ИЗ issues Цикл
					fields = issue.Получить("fields"); 
					Если fields <> Неопределено Тогда
						
						Если ЭтоОбновление Тогда
							ДатаЗадачи = fields["updated"];
						Иначе
							ДатаЗадачи = fields["created"];
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ДатаЗадачи) Тогда
							ДатаЗадачи = ПрочитатьДатуJSON(ДатаЗадачи, ФорматДатыJSON.ISO)
						КонецЕсли;
						ДатаПоследнейЗадачи = Макс(ДатаПоследнейЗадачи, ДатаЗадачи);
						
						Если НЕ fields["creator"] = Неопределено Тогда 
							Автор = ПользовательJira(fields["creator"]["name"], fields["creator"]["displayName"], СерверJira);
						КонецЕсли;
						Если НЕ fields["reporter"] = Неопределено Тогда 
							ПользовательJira(fields["reporter"]["name"], fields["reporter"]["displayName"], СерверJira);
						КонецЕсли;    
						
						Приоритет = Перечисления.JiraПриоритеты.ПустаяСсылка();
						Если НЕ fields["customfield_11504"] = Неопределено Тогда
							Если fields["customfield_11504"] = "П" Тогда  
								Приоритет = Перечисления.JiraПриоритеты["D"];
							ИначеЕсли fields["customfield_11504"] = "С" Тогда
								Приоритет = Перечисления.JiraПриоритеты["C"];
							ИначеЕсли fields["customfield_11504"] = "В" Тогда
								Приоритет = Перечисления.JiraПриоритеты["B"];
							Иначе
								Приоритет = Перечисления.JiraПриоритеты[fields["customfield_11504"]];        
							КонецЕсли;
						КонецЕсли;   
						
						ITService = ""; 
						Если НЕ fields["customfield_11305"] = Неопределено Тогда  
							ITService = fields["customfield_11305"]["value"];		
						КонецЕсли;
						
						issuetype = Неопределено;
						Если fields["issuetype"] <> Неопределено Тогда
							issuetype = ТипЗапросаJira(fields["issuetype"].Получить("id"), ПроектJira, КэшДанныхТипыЗапросов, fields["issuetype"].Получить("name"), fields["issuetype"].Получить("subtask"));
						КонецЕсли;
						
						Задача = ЗадачаJira(
							СерверJira,
							issue["id"],
							issue["key"],
							Автор,
							ПроектJira,
							СокрЛП(fields["description"]), 
							ПрочитатьДатуJSON(fields["created"], ФорматДатыJSON.ISO), 
							ПрочитатьДатуJSON(fields["updated"], ФорматДатыJSON.ISO), 
							Приоритет,
							ITService,
							issuetype
						);
						Если fields["worklog"]["worklogs"] <> Неопределено Тогда
							Для Каждого Стр Из fields["worklog"]["worklogs"] Цикл
								ОбработатьИнформациюОЗадаче(Задача, Стр, СерверJira);	
							КонецЦикла;
						КонецЕсли; 
						
						changelogs = issue.Получить("changelog"); 
						Если changelogs <> Неопределено Тогда  
							histories = changelogs.Получить("histories");	
							Если histories <> Неопределено  Тогда
								Для Каждого Стр Из histories Цикл  
									АвторИстории = Справочники.jiraПользователи.ПустаяСсылка();
									Если НЕ Стр["author"] = Неопределено Тогда 
										АвторИстории = ПользовательJira(Стр["author"]["name"], Стр["author"]["displayName"], СерверJira);
									КонецЕсли;
									ИсторияИзмененияЗадач(Задача, Число(Стр["id"]), ПрочитатьДатуJSON(Стр["created"], ФорматДатыJSON.ISO), АвторИстории);  
									
									НаборЗаписей = РегистрыСведений.jiraСоставИзмененияЗадач.СоздатьНаборЗаписей();
									
									НаборЗаписей.Отбор.Задача.Установить(Задача);
									НаборЗаписей.Отбор.id.Установить(Число(Стр["id"]));  
									//НаборЗаписей.Прочитать();
									//НаборЗаписей.Очистить();
									Сч = 1; 
									
									Для Каждого Элм Из Стр["items"] Цикл
										Реквизит = РеквизитJira(СерверJira, СокрЛП(Элм["field"]), КэшДанныхРеквизиты);
										
										СоставИзмененияЗадач(НаборЗаписей, Задача, Число(Стр["id"]), Сч, Реквизит, Элм["from"], Элм["fromString"], Элм["to"], Элм["toString"], ПрочитатьДатуJSON(Стр["created"], ФорматДатыJSON.ISO), АвторИстории); 
										Сч = Сч + 1;	
									КонецЦикла; 
									
									НаборЗаписей.Записать(ЕстьЗаписиВРегистреjiraСоставИзмененияЗадач(Задача, Число(Стр["id"])));
									
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;  
			
		КонецЕсли;   
		startAt = startAt + текПолучено;
	КонецЦикла;   
	Если startAt >= ВсегоЭлементов И ВсегоЭлементов > 0 Тогда
		ЗагрузкаВыполнена = Истина;	
	КонецЕсли;
КонецПроцедуры   

Функция ЕстьЗаписиВРегистреjiraСоставИзмененияЗадач(Задача, id)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("id", id);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	jiraСоставИзмененияЗадач.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.jiraСоставИзмененияЗадач КАК jiraСоставИзмененияЗадач
	|ГДЕ
	|	jiraСоставИзмененияЗадач.Задача = &Задача
	|	И jiraСоставИзмененияЗадач.id = &id";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция РеквизитJira(СерверJira, id, Наименование = "", ОбновитьНаименование = Ложь, КэшДанных = Неопределено) Экспорт
	
	Если КэшДанных <> Неопределено Тогда
		Реквизит = КэшДанных.Получить(id);
		Если Реквизит <> Неопределено Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	jiraРеквизитыЗадач.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.jiraРеквизитыЗадач КАК jiraРеквизитыЗадач
	|ГДЕ
	|	jiraРеквизитыЗадач.Владелец = &СерверJira
	|	И jiraРеквизитыЗадач.id = &id";
	
	Запрос.УстановитьПараметр("id", id);
	Запрос.УстановитьПараметр("СерверJira", СерверJira);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Реквизит = Выборка.Ссылка;
		Если ОбновитьНаименование И ЗначениеЗаполнено(Наименование) И Реквизит.Наименование <> Наименование Тогда
			РеквизитОб = Реквизит.ПолучитьОбъект();
			РеквизитОб.Наименование = Наименование;
			РеквизитОб.Записать();
		КонецЕсли;
	Иначе
		РеквизитОб = Справочники.jiraРеквизитыЗадач.СоздатьЭлемент();
		РеквизитОб.Владелец = СерверJira;  
		РеквизитОб.id = id;   
		Если ЗначениеЗаполнено(Наименование) Тогда
			РеквизитОб.Наименование = Наименование; 
		Иначе 
			РеквизитОб.Наименование = id;		
		КонецЕсли;
		РеквизитОб.Записать();
		
		Реквизит = РеквизитОб.Ссылка;
	КонецЕсли;
	
	Если КэшДанных <> Неопределено Тогда
		КэшДанных.Вставить(id, Реквизит);
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

Процедура СоставИзмененияЗадач(НаборЗаписей, Задача, id, idСтроки, Реквизит, from, fromString, _to, toString, ДатаСоздания, Автор)
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Задача = Задача;
	НоваяЗапись.id = id;
	НоваяЗапись.idСтроки = idСтроки;
	НоваяЗапись.Реквизит = Реквизит;
	НоваяЗапись._from = from;
	НоваяЗапись._fromString = fromString;
	НоваяЗапись._to = _to;
	НоваяЗапись._toString = toString; 
	НоваяЗапись.ДатаСоздания = ДатаСоздания;
	НоваяЗапись.Автор = Автор;
	
КонецПроцедуры

Процедура ИсторияИзмененияЗадач(Задача, ID, ДатаСоздания, Автор)
	МенеджерЗаписи = РегистрыСведений.jiraИсторияИзмененияЗадач.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Задача = Задача;
	МенеджерЗаписи.ID = ID;
	МенеджерЗаписи.ДатаСоздания = ДатаСоздания;
	МенеджерЗаписи.Автор = Автор;
	
	МенеджерЗаписи.Записать();		
КонецПроцедуры

Процедура ОбработатьИнформациюОЗадаче(Задача, СтрокаСДанными, СерверJira)  
	Автор = ПользовательJira(СтрокаСДанными["author"]["name"], СтрокаСДанными["author"]["name"], СерверJira);  
	АвторОбновления = ПользовательJira(СтрокаСДанными["updateAuthor"]["name"], СтрокаСДанными["updateAuthor"]["name"], СерверJira); 
	СписанноеВремяПоЗадаче(Задача,
	СтрокаСДанными["id"],
	ПрочитатьДатуJSON(СтрокаСДанными["created"], ФорматДатыJSON.ISO), 
	ПрочитатьДатуJSON(СтрокаСДанными["started"], ФорматДатыJSON.ISO), 
	ПрочитатьДатуJSON(СтрокаСДанными["updated"], ФорматДатыJSON.ISO),
	АвторОбновления,
	СтрокаСДанными["timeSpentSeconds"],
	СтрокаСДанными["comment"]);
КонецПроцедуры  

Функция ДополнительныеПараметры(ПараметрыПодключения, ПрочитатьВСоответствие = Ложь)
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Host", "jira.lancetpharm.ru"); 
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыПреобразованияJSON = Новый Структура();
	ПараметрыПреобразованияJSON.Вставить("ПрочитатьВСоответствие", ПрочитатьВСоответствие);
	ПараметрыПреобразованияJSON.Вставить("ФорматДатыJSON", ФорматДатыJSON.ISO);
	ПараметрыПреобразованияJSON.Вставить("ВариантЗаписиДатыJSON", ВариантЗаписиДатыJSON.УниверсальнаяДата);
	ИменаСвойствСоЗначениямиДата = Новый Массив;   
	ПараметрыПреобразованияJSON.Вставить("ИменаСвойствСоЗначениямиДата", ИменаСвойствСоЗначениямиДата);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);     
	
	КлючиЛогинИПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыПодключения, "Логин, Пароль");
	Аутентификация = Новый Структура("Пользователь, Пароль", КлючиЛогинИПароль.Логин, КлючиЛогинИПароль.Пароль);
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);
	
	Возврат ДополнительныеПараметры;
КонецФункции 

Функция ЗадачаJira(СерверJira, 
	Знач issueid,
	Знач jira_key, 
	Автор,
	Проект,
	Описание,
	created,
	update,
	prior,
	ITService,
	issuetype,
	КэшДанных = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(issueid) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Задача = Справочники.jiraЗадачи.НайтиПоРеквизиту("issueid", Число(issueid),, СерверJira);
	Если НЕ ЗначениеЗаполнено(Задача) Тогда
		
		НовыйОбъект = Справочники.jiraЗадачи.СоздатьЭлемент();    
		НовыйОбъект.Наименование = jira_key;
		НовыйОбъект.Владелец = СерверJira;
		НовыйОбъект.issueid = Число(issueid);
		НовыйОбъект.key = jira_key;
		НовыйОбъект.Автор = Автор;  
		НовыйОбъект.Проект = Проект;
		НовыйОбъект.Описание = Описание;
		НовыйОбъект.created = created;
		НовыйОбъект.update = update;
		НовыйОбъект.prior = prior;  
		НовыйОбъект.ITService = ITService;
		НовыйОбъект.type = issuetype;
		НовыйОбъект.Записать();
		
		Задача = НовыйОбъект.Ссылка;
		
	Иначе 
		
		ОбъектЗадача = Задача.ПолучитьОбъект();  
		ОбъектЗадача.Автор = Автор; 
		ОбъектЗадача.Проект = Проект; 
		ОбъектЗадача.Описание = Описание;
		ОбъектЗадача.created = created;
		ОбъектЗадача.update = update; 
		ОбъектЗадача.prior = prior;
		ОбъектЗадача.ITService = ITService;
		ОбъектЗадача.type = issuetype;
		ОбъектЗадача.Записать();       
		
		Задача = ОбъектЗадача.Ссылка;
		
	КонецЕсли;
	
	Возврат Задача;
КонецФункции

Процедура СписанноеВремяПоЗадаче(Задача, ID, ДатаСоздания, ДатаСтарта, ДатаОбновления, АвторОбновления, ВремяВСекундах, Комментарий)
	НаборЗаписей = РегистрыСведений.jiraСписанноеВремяПоЗадаче.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.ID.Установить(Число(ID));
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.Задача = Задача;
		НоваяЗапись.ID = Число(ID);
		НоваяЗапись.ДатаСоздания = ДатаСоздания; 
		НоваяЗапись.ДатаСтарта = ДатаСтарта;
		НоваяЗапись.ДатаОбновления = ДатаОбновления;
		НоваяЗапись.АвторОбновления = АвторОбновления;
		НоваяЗапись.ВремяВСекундах = ВремяВСекундах;
		НоваяЗапись.Комментарий = Комментарий;
	Иначе
		Для Каждого Стр Из НаборЗаписей Цикл 
			Стр.ДатаСоздания = ДатаСоздания; 
			Стр.ДатаСтарта = ДатаСтарта;
			Стр.ДатаОбновления = ДатаОбновления;
			Стр.АвторОбновления = АвторОбновления;
			Стр.ВремяВСекундах = ВремяВСекундах;
			Стр.Комментарий = Комментарий;
		КонецЦикла;
	КонецЕсли; 
	
	НаборЗаписей.Записать(); 
КонецПроцедуры

Функция ТипЗапросаJira(Знач ID, Знач ПроектJira, КэшДанных = Неопределено, Наименование = "", IsSubtask = Ложь)
	
	ID = СокрЛП(ID);
	
	Если НЕ ЗначениеЗаполнено(ID) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПроектJira) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Справочники.jiraТипыЗапросов.НайтиПоКоду(ID, Истина,, ПроектJira);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		НовыйОбъект = Справочники.jiraТипыЗапросов.СоздатьЭлемент();
		НовыйОбъект.Владелец = ПроектJira;
		НовыйОбъект.Код = ID;
		
		НовыйОбъект.Наименование = Наименование;
		НовыйОбъект.IsSubtask = IsSubtask;
		НовыйОбъект.Записать();
		
		Результат = НовыйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КатегорияСтатусаJira(Знач ID, Знач ПроектJira, КэшДанных = Неопределено, Наименование = "", Ключ = "")
	
	ID = СокрЛП(ID);
	
	Если НЕ ЗначениеЗаполнено(ID) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПроектJira) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Справочники.jiraКатегорииСтатусов.НайтиПоКоду(ID, Истина,, ПроектJira);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		НовыйОбъект = Справочники.jiraКатегорииСтатусов.СоздатьЭлемент();
		НовыйОбъект.Владелец = ПроектJira;
		НовыйОбъект.Код = ID;
		
		НовыйОбъект.Наименование = Наименование;
		НовыйОбъект.Ключ = Ключ;
		НовыйОбъект.Записать();
		
		Результат = НовыйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусJira(Знач ID, Знач ТипЗапросаJira, КэшДанных = Неопределено, КатегорияСтатусаJira = Неопределено, Наименование = "", Описание = "")
	
	ID = СокрЛП(ID);
	
	Если НЕ ЗначениеЗаполнено(ID) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЗапросаJira) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Справочники.jiraСтатусы.НайтиПоКоду(ID, Истина,, ТипЗапросаJira);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		НовыйОбъект = Справочники.jiraСтатусы.СоздатьЭлемент();
		НовыйОбъект.Владелец = ТипЗапросаJira;
		НовыйОбъект.Код = ID;
		
		НовыйОбъект.Наименование = Наименование;
		НовыйОбъект.Описание = Описание;
		НовыйОбъект.Категория = КатегорияСтатусаJira;
		
		НовыйОбъект.Записать();
		
		Результат = НовыйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПользовательJira(Знач Имя, Знач Наименование="", СерверJira, КэшДанных = Неопределено)
	
	Имя = СокрЛП(Имя);
	
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Справочники.jiraПользователи.НайтиПоРеквизиту("Имя", Имя,, СерверJira);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		НовыйОбъект = Справочники.jiraПользователи.СоздатьЭлемент();
		НовыйОбъект.Владелец = СерверJira;
		НовыйОбъект.Имя = Имя;
		
		НовыйОбъект.Наименование = Наименование;
		
		НовыйОбъект.Записать();
		
		Результат = НовыйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	


Функция ПараметрыПодключенияКСерверуjira(СерверJira) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		ВызватьИсключение "Не заполнен сервер jira";
	КонецЕсли;
	
	НастрорйкиПодключения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СерверJira, "НастрорйкиПодключения");
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		ВызватьИсключение "Не заполнены настройки подключения к серверу jira";
	КонецЕсли;
	
	Если НЕ _МАА_Процедуры.ЭтоРабочаяБаза() Тогда
		НастрорйкиПодключения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастрорйкиПодключения, "НастройкаДляТестовойБазы");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		ВызватьИсключение "Не заполнены настройки подключения к серверу jira (для тестовой базы)";
	КонецЕсли;
	
	Возврат НастрорйкиПодключения;
	
КонецФункции

Функция ЗаголовкиHTTPЗапросаПодключенияКСерверуJira(ПараметрыПодключения)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Basic " + ПолучитьBase64СтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзСтроки(ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыПодключения, "Логин") + ":" + ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыПодключения, "Пароль"))));
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Заголовки;
	
КонецФункции

Функция СообщениеОбОшибкеИзОтветаHTTP(ОтветHTTP)
	
	СообщениеОбОшибке = "";
	
	Попытка
		
		Тело = ОтветHTTP.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(Тело) Тогда
			СообщениеОбОшибке = Тело;
			
			Если СтрДлина(СообщениеОбОшибке) > 4096 Тогда
				СообщениеОбОшибке = Лев(СообщениеОбОшибке, 4096);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ФорматДатыДляJQL() Экспорт
	Возврат "ДФ='гггг/ММ/дд ЧЧ:мм'";
КонецФункции

Функция ДатаДляJQL(Дата) Экспорт
	Возврат Формат(Дата, ФорматДатыДляJQL());
КонецФункции

Функция СоздатьЗадачу(ШаблонЗадачи, ПараметрыЗадачи, Основание = Неопределено, Знач Таймаут = 120) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ШаблонЗадачи) Тогда
		ВызватьИсключение "Не передан шаблон для создания задачи";
	КонецЕсли;
	
	ПроектJira = ШаблонЗадачи.Проект;
	
	Если НЕ ЗначениеЗаполнено(ПроектJira) Тогда
		ВызватьИсключение "Не заполнен проект jira";
	КонецЕсли;
	
	СерверJira = ПроектJira.Владелец;
	
	Если НЕ ЗначениеЗаполнено(СерверJira) Тогда
		ВызватьИсключение "Не заполнен сервер jira";
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыПодключенияКСерверуjira(СерверJira);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПодключения) Тогда
		ВызватьИсключение "Не заполнены настройки подключения к серверу jira";
	КонецЕсли;
	
	ssl = Неопределено;
	Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	
	Порт = ПараметрыПодключения.Порт;
	Если НЕ ЗначениеЗаполнено(Порт) Тогда
		Порт = ?(ПараметрыПодключения.ЗащищенноеСоединение, 443, 80);
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.ИмяСервера, Порт, , , , Таймаут, ssl);
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ТекстJSON = ШаблонЗадачи.ШаблонJSON;
	Для Каждого СтрокаПараметра ИЗ ШаблонЗадачи.ПараметрыШаблона Цикл
		
		//Если НЕ СтрокаПараметра.Используется Тогда
		//КонецЕсли;
		
		ЗначениеПараметра = "";
		Если ЗначениеЗаполнено(СтрокаПараметра.ИмяПараметра) И ПараметрыЗадачи.Свойство(СтрокаПараметра.ИмяПараметра) Тогда
			ЗначениеПараметра = ПараметрыЗадачи[СтрокаПараметра.ИмяПараметра];
		ИначеЕсли ПараметрыЗадачи.Свойство(СтрокаПараметра.СтрокаЗамены) Тогда
			ЗначениеПараметра = ПараметрыЗадачи[СтрокаПараметра.СтрокаЗамены];
		КонецЕсли;
		
		ТекстJSON = СтрЗаменить(ТекстJSON, "%" + СтрокаПараметра.СтрокаЗамены + "%", СтрокаJSON(ЗначениеПараметра));
		
	КонецЦикла;
	
	СтрJSON = "{
	|	""fields"": {
	|";
	// Тут JSON стандартных параметров типа ключа проекта и т.д.
	
	СтрJSON = СтрJSON + "
	|		""project"": {
	|			""key"": """ + ПроектJira.КлючПроекта + """
	|		},";
	
	СтрJSON = СтрJSON + "
	|		""issuetype"": {
	|			""id"": """ + ШаблонЗадачи.ТипЗапроса.Код + """
	|		},";
	
	Если ЗначениеЗаполнено(ШаблонЗадачи.Автор) Тогда
		
		СтрJSON = СтрJSON + "
		|		""reporter"": {
		|			""name"": """ + ШаблонЗадачи.Автор.Имя + """
		|		},";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонЗадачи.Исполнитель) Тогда
		
		СтрJSON = СтрJSON + "
		|		""assignee"": {
		|			""name"": """ + ШаблонЗадачи.Исполнитель.Имя + """
		|		},";
		
	КонецЕсли;
	
	СтрJSON = СтрJSON + "
	|" + ТекстJSON;
	
	СтрJSON = СтрJSON + "
	|	}
	|}";
	
	СсылкаНаРесурс = ПараметрыПодключения.БазовыйURL + "/issue";
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс, ЗаголовкиHTTPЗапросаПодключенияКСерверуJira(ПараметрыПодключения));
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрJSON, КодировкаТекста.UTF8);
	
	HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Если Цел(HTTPОтвет.КодСостояния/10) <> 20 Тогда // возврат 201
		ВызватьИсключение "Не удалось отправить запрос: " + СообщениеОбОшибкеИзОтветаHTTP(HTTPОтвет);
	КонецЕсли;
	
	СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаОтвет);
	ПолученныеДанные = ПрочитатьJSON(Чтение, Истина,,ФорматДатыJSON.ISO);
	Чтение.Закрыть();
	Если ПолученныеДанные = Неопределено Тогда
		ВызватьИсключение "Не удалось прочитать данные JSON в ответе сервера" + СообщениеОбОшибкеИзОтветаHTTP(HTTPОтвет);
	КонецЕсли;
	
	МЗ = РегистрыСведений.jiraСвязанныеЗадачи.СоздатьМенеджерЗаписи();
	МЗ.Jira = СерверJira;
	МЗ.key = ПолученныеДанные.Получить("key");
	МЗ.id = ПолученныеДанные.Получить("id");
	
	МЗ.ДатаСоздания = ТекущаяДата();
	МЗ.Основание = Основание;
	МЗ.Проект = ПроектJira;
	
	МЗ.Записать(Истина);
	
	Возврат ПолученныеДанные;
	
КонецФункции

Функция СтрокаJSON(ЗначениеПараметра) Экспорт
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
		Результат = СтрЗаменить(ЗначениеПараметра, "\", "\\" );
		Результат = СтрЗаменить(Результат, "/", "\/" );
		Результат = СтрЗаменить(Результат, Символы.ПС, "\n" );
		Результат = СтрЗаменить(Результат, """", "\""" );
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
		Результат = Формат(ЗначениеПараметра,"ДФ=гггг-ММ-дд");
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
		Результат = Формат(ЗначениеПараметра,"ЧН=0; ЧГ=");
	Иначе
		Результат = Строка(ЗначениеПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ТекстСсылкиJira(СерверJira, Ключ) Экспорт
	
	ПараметрыПодключения = ИнтеграцияСJiraПовтИсп.ПараметрыПодключенияКСерверуjira(СерверJira);
	
	ТекстСсылки = "http";
	Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
		ТекстСсылки = ТекстСсылки + "s";
	КонецЕсли;
	
	ТекстСсылки = ТекстСсылки + "://" + ПараметрыПодключения.ИмяСервера;
	
	Если ЗначениеЗаполнено(ПараметрыПодключения.Порт) Тогда
		ТекстСсылки = ТекстСсылки + ":" + Формат(ПараметрыПодключения.Порт, "ЧГ=");
	КонецЕсли;
	
	ТекстСсылки = ТекстСсылки + "/browse/" + Ключ;
	
	Возврат ТекстСсылки;
	
КонецФункции

Функция ТекстRestСсылкиJira(СерверJira, id) Экспорт
	
	ПараметрыПодключения = ИнтеграцияСJiraПовтИсп.ПараметрыПодключенияКСерверуjira(СерверJira);
	
	ТекстСсылки = "http";
	Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
		ТекстСсылки = ТекстСсылки + "s";
	КонецЕсли;
	
	ТекстСсылки = ТекстСсылки + "://" + ПараметрыПодключения.ИмяСервера;
	
	Если ЗначениеЗаполнено(ПараметрыПодключения.Порт) Тогда
		ТекстСсылки = ТекстСсылки + ":" + Формат(ПараметрыПодключения.Порт, "ЧГ=");
	КонецЕсли;
	
	ТекстСсылки = ТекстСсылки + "/" + ПараметрыПодключения.БазовыйURL + "/issue/" + id;
	
	Возврат ТекстСсылки;
	
КонецФункции

Функция ПарамерыПоследнейЗадачиПоОснованию(Основание) Экспорт
	
	Результат = Новый Структура("Jira, key, Проект, ДатаСоздания, id");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	jiraСвязанныеЗадачи.Jira КАК Jira,
	|	jiraСвязанныеЗадачи.key КАК key,
	|	jiraСвязанныеЗадачи.Проект КАК Проект,
	|	jiraСвязанныеЗадачи.ДатаСоздания КАК ДатаСоздания,
	|	jiraСвязанныеЗадачи.id КАК id
	|ИЗ
	|	РегистрСведений.jiraСвязанныеЗадачи КАК jiraСвязанныеЗадачи
	|ГДЕ
	|	jiraСвязанныеЗадачи.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьЗадачиJira() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	jiraПроекты.Ссылка КАК Проект,
	|	JiraПоследняяЗагрузкаЗадач.ДатаИВремяПоследнейЗагрузки КАК ДатаИВремяПоследнейЗагрузки
	|ИЗ
	|	Справочник.jiraПроекты КАК jiraПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.JiraПоследняяЗагрузкаЗадач КАК JiraПоследняяЗагрузкаЗадач
	|		ПО jiraПроекты.Ссылка = JiraПоследняяЗагрузкаЗадач.Проект
	|ГДЕ
	|	НЕ jiraПроекты.ПометкаУдаления
	|	И jiraПроекты.УчаствуетВОбмене";
	
	ВыборкаПроекты = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПроекты.Следующий() Цикл
		
		ДатаНачалаЗагрузки = ТекущаяДата();
		ДатаИВремяПоследнейЗагрузки = ВыборкаПроекты.ДатаИВремяПоследнейЗагрузки;
		Если НЕ ЗначениеЗаполнено(ДатаИВремяПоследнейЗагрузки) Тогда
			ДатаИВремяПоследнейЗагрузки = НачалоГода(ТекущаяДата());
			ДатаИВремяПоследнейЗагрузки = Макс(ДатаИВремяПоследнейЗагрузки, ДобавитьМесяц(ТекущаяДата(),-6));
		КонецЕсли;
		
		ЗагрузкаВыполнена = Ложь;
		ДатаПоследнейЗадачи = Неопределено;
		ЗагрузитьСписокЗадач(ВыборкаПроекты.Проект, ДатаИВремяПоследнейЗагрузки, ТекущаяДата(),,, ЗагрузкаВыполнена,, ДатаПоследнейЗадачи);
		
		Если НЕ ЗначениеЗаполнено(ДатаПоследнейЗадачи) Тогда
			ДатаПоследнейЗадачи = ДатаНачалаЗагрузки - 600;
		КонецЕсли;
		ДатаПоследнейЗадачи = Мин(ДатаПоследнейЗадачи, ДатаНачалаЗагрузки - 120);
		
		Если ЗагрузкаВыполнена Тогда
			МенеджерЗаписи = РегистрыСведений.JiraПоследняяЗагрузкаЗадач.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Проект = ВыборкаПроекты.Проект;
			МенеджерЗаписи.ДатаИВремяПоследнейЗагрузки = ДатаПоследнейЗадачи;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
