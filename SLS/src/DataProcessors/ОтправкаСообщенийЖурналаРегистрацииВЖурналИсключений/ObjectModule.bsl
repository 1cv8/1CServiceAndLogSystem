
Перем СобытияБезМодуля;

#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт
	
	МетаданныеОбработки = Метаданные();
	СинонимОбработки 	= МетаданныеОбработки.Синоним;
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("3.0.1.252");
	
	ПараметрыРегистрации.Вид 				= "ДополнительнаяОбработка";
	ПараметрыРегистрации.Наименование		= СинонимОбработки;
	ПараметрыРегистрации.Версия				= "1.23";
	ПараметрыРегистрации.Информация			= СинонимОбработки;
	ПараметрыРегистрации.БезопасныйРежим	= Ложь;
	
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
					СинонимОбработки,
					МетаданныеОбработки.Имя,
					"ВызовСерверногоМетода",
					Истина);
					
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	МетаданныеОбработки = Метаданные();
	
	Если ИдентификаторКоманды = МетаданныеОбработки.Имя Тогда
		ВыполнитьОсновнуюКомандуОбработки();
	Иначе
		ВызватьИсключение("Неизвестная команда: " + ИдентификаторКоманды);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "", Скрыть = Ложь)
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	НоваяКоманда.Скрыть = Скрыть;
	
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьОсновнуюКомандуОбработки() Экспорт
	
	МетаданныеОбработки = Метаданные();
	
	ИмяСобытияЖР = "Обработка." + МетаданныеОбработки.Имя;
	
	ОтправитьСообщенияЧерезHTTPSНаСервере(Ложь, Истина, Неопределено, Неопределено); 
	
	ТекстСообщения = "ОбработкаЗавершена";
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР,
							УровеньЖурналаРегистрации.Информация,
							,
							,
							ТекстСообщения);
		
КонецПроцедуры

Процедура ОтправитьСообщенияЧерезHTTPSНаСервере(ИнтерактивнаяОтправка, ПроверкаПройдена, НачинатьСДаты, Результат_ID = "") Экспорт
	
	СтруктураНастроек = ПолучитьНастройки();		
	
	Если СтруктураНастроек = Неопределено Тогда
		
		ТекстСообщения = "Настроек не обнаружено. Необходимо заполнить настройки и сохранить!";	
			
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = '" + ТекстСообщения + "'");
		Сообщение.Сообщить();
		
		ВызватьИсключение(ТекстСообщения);
			
	КонецЕсли; 
	
	Если НЕ ПроверкаПройдена Тогда
		Возврат;
	КонецЕсли; 
	
	НастройкиПодключения = СтруктураНастроек.НастройкиПодключения;
	
	// добавим информацию о БД
	НастройкиПодключения.Вставить("ИмяБазы"		, НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref"));
	НастройкиПодключения.Вставить("ВерсияБазы"	, Метаданные.Версия);//"ver. " + Метаданные.Версия);
	
	// получим все небодимые даты для отправки сообщения 
	СтруктураДат = ПолучитьВсеНеобходимыеДаты(ИнтерактивнаяОтправка, НачинатьСДаты);
	
	ДатаНачала 								= СтруктураДат.ДатаНачала;
	
	ОтборыЖурналаРегистрации = Новый Структура;
	ОтборыЖурналаРегистрации.Вставить("Уровень"			, УровеньЖурналаРегистрации.Ошибка);
	ОтборыЖурналаРегистрации.Вставить("ДатаНачала"		, ДатаНачала);
	ОтборыЖурналаРегистрации.Вставить("ДатаОкончания"	, ТекущаяДата()-300);
	
	ОтборыЖурналаРегистрации.ДатаОкончания = Мин(ОтборыЖурналаРегистрации.ДатаОкончания, ДатаНачала + 2*86400-1);
	
	ДатаЧтенияЖурналаРегистрацииНачало = ТекущаяДатаСеанса();
	
	ТаблицаЖурналаРегистрации = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ТаблицаЖурналаРегистрации, ОтборыЖурналаРегистрации, "Дата,ИмяПользователя,Комментарий,РабочийСервер,ПредставлениеМетаданных,ПредставлениеСобытия,Компьютер,Метаданные");
	ТаблицаЖурналаРегистрации.Сортировать("Дата возр");
	
	ДатаЧтенияЖурналаРегистрацииОкончание = ТекущаяДатаСеанса();
	
	
	ВсегоСообщенийВПакете = ТаблицаЖурналаРегистрации.Количество();
	
	УспешноОтправлено 						= 0;
	ДатаЧтенияЖурналаРегистрацииОкончание	= ТекущаяДатаСеанса();
	
	// если не было ошибок за эти сутки, сдвинем запрос на дату окончания
	Если ТаблицаЖурналаРегистрации.Количество() = 0 Тогда
		ХранилищеОбщихНастроек.Сохранить("СтруктураНастроекВыгрузкиВSentry", "ДатаПоследнегоСообщения", ОтборыЖурналаРегистрации.ДатаОкончания, , "AutoStart");
		Возврат;
	Иначе 
		
		HTTPСоединениеСтруктура = ПолучитьHTTPСоединение(НастройкиПодключения);
		Если HTTPСоединениеСтруктура = Неопределено Тогда
			Возврат;	
		КонецЕсли; 
		
	КонецЕсли; 
	
	ДатаПервогоСообщения = Неопределено;
	
	КоличествоЗаписейЗаРаз = НастройкиПодключения.КоличествоЗаписейЗаРаз;
	КоличествоСообщенийКОтправке 	= 0;
	ДатаПоследнегоСообщения = Дата(1,1,1);
	
	МассивСообщений = Новый Массив;
	
	Для Каждого СтрокаТаблицыЖурналаРегистрации Из ТаблицаЖурналаРегистрации Цикл
		
		// количество сообщений ограничено настройками
		Если КоличествоСообщенийКОтправке >= КоличествоЗаписейЗаРаз Тогда
		
			ВыгрузкаПрошлаБезОшибок = ОтправитьСообщениеВSentry(
				HTTPСоединениеСтруктура.HTTPСоединение,
				HTTPСоединениеСтруктура.HTTPЗапрос, 
				МассивСообщений
			);
			
			Если НЕ ВыгрузкаПрошлаБезОшибок Тогда
				Возврат;
			КонецЕсли;
			
			МассивСообщений = Новый Массив;
			
			ХранилищеОбщихНастроек.Сохранить("СтруктураНастроекВыгрузкиВSentry", "ДатаПоследнегоСообщения", ДатаПоследнегоСообщения, , "AutoStart");
			
			КоличествоСообщенийКОтправке 	= 0;
			
			Если ИнтерактивнаяОтправка Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		
		ДатаСообщения = СтрокаТаблицыЖурналаРегистрации.Дата;
		ДатаПоследнегоСообщения = Макс(ДатаСообщения, ДатаПоследнегоСообщения);
		
		СтруктураСообщения = СтруктураСообщенияВSentry(СтрокаТаблицыЖурналаРегистрации, НастройкиПодключения);
		МассивСообщений.Добавить(СтруктураСообщения);
		
		КоличествоСообщенийКОтправке = КоличествоСообщенийКОтправке + 1;
		
		
	КонецЦикла;
	
	Если МассивСообщений.Количество() > 0 Тогда
	
		ВыгрузкаПрошлаБезОшибок = ОтправитьСообщениеВSentry(HTTPСоединениеСтруктура.HTTPСоединение, 
															HTTPСоединениеСтруктура.HTTPЗапрос, 
															МассивСообщений
															);
		
		Если НЕ ВыгрузкаПрошлаБезОшибок Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСообщений = Новый Массив;
	
	ХранилищеОбщихНастроек.Сохранить("СтруктураНастроекВыгрузкиВSentry", "ДатаПоследнегоСообщения", ДатаПоследнегоСообщения+1, , "AutoStart");

КонецПроцедуры

Функция ПолучитьВсеНеобходимыеДаты(ИнтерактивнаяОтправка, НачинатьСДаты) Экспорт
	
	// сохраним до начала обработки сообщений, так как в этот момент могут быть ошибки
	ДатаНачалаОтправки = ТекущаяДатаСеанса();
	
	ДатаПоследнегоСообщения = ХранилищеОбщихНастроек.Загрузить("СтруктураНастроекВыгрузкиВSentry", "ДатаПоследнегоСообщения",, "AutoStart");
	ДатаНачала = ДатаПоследнегоСообщения;
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	// если отправка не через обработку, этого реквизита нет
	Если ИнтерактивнаяОтправка = Ложь Тогда
		НачинатьСДаты = Дата(1, 1, 1);	
	КонецЕсли; 
	
	Если НачинатьСДаты > ДатаНачала Тогда
		ДатаНачала = НачинатьСДаты;
	КонецЕсли; 
	
	СтруктураДат = Новый Структура;
	СтруктураДат.Вставить("ДатаНачала"								, ДатаНачала);
	СтруктураДат.Вставить("ДатаПоследнегоСообщения" 				, ДатаПоследнегоСообщения);
	
	Возврат СтруктураДат; 
	
КонецФункции

Функция ПолучитьHTTPСоединение(НастройкиПодключения)
	
	 HTTPСоединениеСтруктура = Новый Структура;
	
	Попытка
		
		Порт = НастройкиПодключения.Port;
		Если НЕ ЗначениеЗаполнено(Порт) Тогда
			Порт = 80;
		КонецЕсли;
		
		Таймаут = НастройкиПодключения.TimeOut;
		Если НЕ ЗначениеЗаполнено(Таймаут) Тогда
			Таймаут = 25;
		КонецЕсли;
		
		HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.Host, Порт, НастройкиПодключения.Пользователь, НастройкиПодключения.Пароль,, Таймаут);
		HTTPЗапрос 	   = Новый HTTPЗапрос;
		
		текАдресРесурса = СокрЛП(НастройкиПодключения.АдресРесурса);
		Если НЕ СтрЗаканчиваетсяНа(текАдресРесурса, "/") Тогда
			текАдресРесурса = текАдресРесурса + "/";
		КонецЕсли;
		текАдресРесурса = текАдресРесурса + "hs/exept/";
		текАдресРесурса = текАдресРесурса + СокрЛП(НастройкиПодключения.ID_project) + "/";
		
		HTTPЗапрос.АдресРесурса = текАдресРесурса;
		
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		
	Исключение
		
		ТекстСообщения = "При попытке создания HTTPСоединение к Sentry, возникала ошибка: " + ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации("Выгрузка сообщений Журнала регистрации в Sentry:",
		УровеньЖурналаРегистрации.Ошибка,
		, , ТекстСообщения);
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = '" + ТекстСообщения + "'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки; 
	
	HTTPСоединениеСтруктура.Вставить("HTTPСоединение", HTTPСоединение);
	HTTPСоединениеСтруктура.Вставить("HTTPЗапрос"	 , HTTPЗапрос);

	Возврат HTTPСоединениеСтруктура;
	
КонецФункции

Функция СтруктураСообщенияВSentry(СтрокаТаблицыЖурналаРегистрации, НастройкиПодключения)
	
	//ДатаСообщенияУниверсальноеВремя = УниверсальноеВремя(СтрокаТаблицыЖурналаРегистрации.Дата, ЧасовойПояс());
	ДатаСообщенияУниверсальноеВремя = СтрокаТаблицыЖурналаРегистрации.Дата;
	
	ВерсияБазы = НастройкиПодключения.ВерсияБазы;
	
	ВерсияБазы = НастройкиПодключения.ВерсияБазы;
	
	СтруктураСообщения = Новый Структура;
	
	СтруктураСообщения.Вставить("ИмяБазы", НастройкиПодключения.ИмяБазы);
	СтруктураСообщения.Вставить("ВерсияБазы", НастройкиПодключения.ВерсияБазы);
	СтруктураСообщения.Вставить("ДатаСообщения", ЗаписатьДатуJSON(ДатаСообщенияУниверсальноеВремя, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
	СтруктураСообщения.Вставить("Комментарий",			СтрокаТаблицыЖурналаРегистрации.Комментарий);
	СтруктураСообщения.Вставить("ИмяПользователя",		СтрокаТаблицыЖурналаРегистрации.ИмяПользователя);
	СтруктураСообщения.Вставить("Компьютер",			СтрокаТаблицыЖурналаРегистрации.Компьютер);
	
	СтруктураСообщения.Вставить("ПредставлениеСобытия",		СокрЛП(СтрокаТаблицыЖурналаРегистрации.ПредставлениеСобытия));
	СтруктураСообщения.Вставить("Метаданные",				СокрЛП(СтрокаТаблицыЖурналаРегистрации.Метаданные));
	СтруктураСообщения.Вставить("ПредставлениеМетаданных",	СокрЛП(СтрокаТаблицыЖурналаРегистрации.ПредставлениеМетаданных));
		
	Возврат СтруктураСообщения;

КонецФункции

Функция ОтправитьСообщениеВSentry(HTTPСоединение, HTTPЗапрос, МассивСообщений)

	Попытка
		
		ТекстJSON = _ОбщиеФункцииHTTPСервисов.ЗначениеВJSON(МассивСообщений);

		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстJSON);
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Результат_ID = Неопределено;
		
		Если Ответ.КодСостояния <> 200 Тогда
			
			Если Ответ.КодСостояния = 500 Тогда
				ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ВызватьИсключение (ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
		//Если НЕ ПолучатьОтветОтSentry Тогда
			Возврат Истина;	
		//КонецЕсли; 
		
		//Если Ответ.КодСостояния = 200 Тогда
		//	
		//	//ЧтениеJson = Новый ЧтениеJSON;
		//	//ЧтениеJson.ОткрытьПоток(Ответ.ПолучитьТелоКакСтроку("UTF-8"));
		//	Результат_ID = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		//	
		//КонецЕсли; 
		//
		//Если НЕ ЗначениеЗаполнено(Результат_ID) Тогда
		//	Возврат Ложь;	
		//КонецЕсли; 
		
	Исключение
		
		ТекстСообщения = "При попытке отправки сообщения, возникала ошибка: " + ОписаниеОшибки();
						
		ЗаписьЖурналаРегистрации("Выгрузка сообщений Журнала регистрации в Sentry:",
								  УровеньЖурналаРегистрации.Ошибка,
								  ,, ТекстСообщения);
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = '" + ТекстСообщения + "'");
		Сообщение.Сообщить();
		
		Возврат Ложь;	
		
	КонецПопытки; 		
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНастройки()
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("СтруктураНастроекВыгрузкиВSentry", "ОбщиеНастройки",, "AutoStart");
	
	Возврат СтруктураНастроек;
	
КонецФункции

